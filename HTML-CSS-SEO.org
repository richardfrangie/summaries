#+title: HTML CSS SEO
#+date: 2023-03-09

* HTML
** HyperText Markup Language
HyperText Markup Language is the standard markup language for documents designed to be displayed in a web browser. It is often assisted by technologies such as Cascading Style Sheets [[CSS]] and scripting languages such as JavaScript JS.

An HTML document is composed of a tree of simple HTML nodes, such as *text nodes*, and HTML [[Element][elements]], which add semantics and formatting to parts of document. Each element can have HTML attributes specified. Elements can also have content, including other elements and text.

*Note*: To be able to include angle brackets in the text of a document, even though they have a special meaning in HTML, yet another form of special notation has to be introduced. A plain opening angle bracket is written as ~&lt;~ (“less than”), and a closing bracket is written as ~&gt;~ (“greater than”). In HTML, an ampersand ( ~&~ ) character followed by a name or character code and a semicolon ( ~;~ ) is called an entity and will be replaced by the character it encodes.

This is analogous to the way backslashes are used in JavaScript strings. Since this mechanism gives ampersand characters a special meaning, too, they need to be escaped as ~&amp;~. Inside attribute values, which are wrapped in double quotes, ~&quot;~ can be used to insert an actual quote character.

** Element
*** Definition
HTML elements are indicated in the document by HTML tags, enclosed in angle brackets (an element is not a tag). Tags may also enclose further tag markup between the start and end, including a mixture of tags and text. This indicates further (nested) elements, as children of the parent element.

#+begin_src artist

                       Element
   ┌──────────────────────┴─────────────────────┐
       Opening tag            Content     Closing tag
   ┌─────────┴─────────┐┌────────┴─────────┐┌─┴─┐
   <p class="paragraph">This is a paragraph.</p>
      └─┬─┘  └───┬───┘
    Atribute  Atribute
     name      value

#+end_src

*** Block-level elements
Browsers typically display the block-level element with a newline both before and after the element. You can visualize them as a stack of boxes. Browsers automatically add some space (a margin) before and after the element.

A block-level element always takes up the full width available (stretches out to the left and right as far as it can).

A block-level element occupies the entire horizontal space of its parent element (container), and vertical space equal to the height of its contents, thereby creating a "block".

Two commonly used block elements are: [[p][<p>]] and [[div][<div>]]. The ~<p>~ element defines a paragraph in an HTML document. The ~<div>~ element defines a division or a section in an HTML document.

Block-level elements have the following properties:

  - Always start on a new line
  - Take up as much horizontal space as possible (the full width of the container or browser window if there is no container)
  - Will respect width and height CSS properties
  - Horizontal and vertical margins both work

*** Inline elements
Inline elements are those which only occupy the space bounded by the tags defining the element, instead of breaking the flow of the content.

An inline element does not start on a new line and only takes up as much width as necessary.

If an inline element does not fit on a line, create a different box for each line on which it is present.

Inline elements have the following properties:

  - Do not start on a new line
  - Only use as much horizontal space as required by the content
  - Do not accept width and height CSS properties
  - Margins will work horizontally, but not vertically
  - Padding works on all sides, but the top and bottom may overlap other elements.

*** inline-block
The inline-block value is a strange combo of both block and inline.

  - Elements accept width and height properties
  - Elements can have vertical and horizontal padding on all sides
  - Elements do not start on a new line
  - There will often be a small gap between inline-block elements

*** none
The none value of the display property will cause an element not to display at all.

This is similar to the visibility property with one important distinction. Setting display to none will cause the element to be removed from the document flow completely, and the space where it would have been will also be removed. Setting the visibility property to hidden will cause the element to be invisible, but the space the element occupies will still be reserved.

** Types of elements
*** Structure
**** DOCTYPE
A document type declaration, is an "information" to the browser about what document type to expect.

#+begin_src html

<!-- Defines that this document is an HTML5 document -->
<!DOCTYPE html>

<!-- Defines that this document is an older HTML Documents -->
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">

#+end_src

**** html
The ~<html>~ (block) element is the root element of an HTML page, it represents the entire document.

#+begin_src html

<!DOCTYPE html>
<html lang="en-us">

 <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>Layout Task</title>
    <link href="styles.css" rel="stylesheet" type="text/css">
 </head>

 <body>
  <div class="wrapper">
    <header>
      <nav>
        <ul>
          <li><a href="">About</a></li>
          <li><a href="">Contact</a></li>
          <li><a href="">Meet the team</a></li>
          <li><a href="">Blog</a></li>
        </ul>
      </nav>
    </header>
    <main>
      <article>
        <div class="content">
          <h1>Veggies!</h1>
          <p>…</p>
        </div>
        <aside class="related">
          <p>…</p>
        </aside>
      </article>

      <aside class="sidebar">
        <h2>External vegetable-based links</h2>
        <ul>
          <li>…</li>
        </ul>
      </aside>
    </main>

    <footer><p>&copy;2019</p></footer>
  </div>

 </body>
</html>

#+end_src

**** head
The ~<head>~ (block) element defines the document header, which contains meta information about the HTML page. ~<head>~ may also include [[meta][<meta>]], [[title][<title>]], [[link][<link>]] and other elements.

#+begin_src html

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width" />
  <title>Layout Task</title>
  <link href="styles.css" rel="stylesheet" type="text/css">
</head>

#+end_src

**** body
The ~<body>~ (block) element contains the body of document, which will be rendered by the browser.

#+begin_src html

<!DOCTYPE html>
<html lang="en-us">
  <head>
    <meta charset="utf-8" />
  </head>
 <body>
   <div class="myDiv">
     <h2>This is a heading in a div element</h2>
     <p>This is some text in a div element.</p>
   </div>
 </body>
</html>

#+end_src

**** div
The ~<div>~ (block) tag is a block level non-semantic wrappers element which defines a *division or a section* in an HTML document. The ~<div>~ tag *is used as a container* for HTML elements - which is then styled with CSS or manipulated with JavaScript. Any sort of content can be put inside the ~<div>~ tag!

*Note*: By default, browsers always place a line break before and after the ~<div>~ element.

#+begin_src html

<div class="myDiv">
  <h2>This is a heading in a div element</h2>
  <p>This is some text in a div element.</p>
</div>

#+end_src

**** span
The ~<span>~ (inline) tag is an *inline container* non-semantic wrappers element used to *mark up* a part of a text, or a part of a document.

Useful when you can't think of a better semantic text element to wrap your content, or don't want to add any specific meaning, it allows you to group a set of elements and declare a set of style rules for the set. It exists purely to apply style, and so has no effect when the style sheet is disabled.

#+begin_src html

 <p>My mother has <span style="color:blue">blue</span> eyes.</p>

#+end_src

*** Meta
**** meta
The ~<meta>~ (meta) tag defines metadata about an HTML document. Metadata is data (information) about data, are typically used to specify character set, page description, keywords, author of the document, and viewport settings. There is a method to let web designers take control over the viewport (the user's visible area of a web page), through the ~<meta>~ tag.

#+begin_src html

 <head>
  <meta charset="UTF-8">
  <meta name="description" content="Free Web tutorials">
  <meta name="keywords" content="HTML, CSS, JavaScript">
  <meta name="author" content="John Doe">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>

#+end_src

**** title
The ~<title>~ (meta) tag defines the title of the document. The title must be text-only, and it is shown in the browser's title bar or in the page's tab. The contents of a page title is very important for search engine optimization (SEO)!

#+begin_src html

<head>
  <title>Layout Task</title>
</head>

#+end_src

**** link
The ~<link>~ (meta) tag specifies relationships between the current document and an external resource. This element is most commonly used to link to CSS, but is also used to establish site icons among other things. This element contains attributes only.

#+begin_src html

<link rel="stylesheet" href="estilo.css" media="screen" type="text/css"
  title="Mi hoja de estilo">
<!-- It means to link link the stylesheet rel="stylesheet" contained in the -->
<!-- file called href="estilo.css" which is written in CSS language -->
<!-- type="text/css" that is only valid for computer screens media="screen" -->
<!-- and is titled title="Mi hoja de estilo". -->

#+end_src

**** style
The ~<style>~ (meta) element contains style information for a document, or part of a document. It contains CSS, which is applied to the contents of the document containing the ~<style>~ element.

#+begin_src html

<head>
  <style>
    h1 {color:red;}
    p {color:blue;}
  </style>
</head>

#+end_src

**** script
The ~<script>~ (meta) tag is used to embed a client-side script (JavaScript).

#+begin_src html

<!-- Include a piece of JavaScript in a document. -->
<script>alert("hello!");</script>

<!-- Can be given an src attribute to fetch a script file from a URL. -->
<script src="path/name.js"></script>

#+end_src

**** noscript
The ~<noscript>~ (meta) tag defines an alternate content to be displayed to users that have disabled scripts in their browser or have a browser that doesn't support script. The ~<noscript>~ element can be used in both [[head][<head>]] and [[body][<body>]]. When used inside ~<head>~, the ~<noscript>~ element could only contain [[link][<link>]], [[style][<style>]], and [[meta][<meta>]] elements.

#+begin_src html

<script>
document.write("Hello World!")
</script>
<noscript>Your browser does not support JavaScript!</noscript>

#+end_src

**** base
The ~<base>~ (self-closing) tag specifies the base URL and/or target for all relative URLs in a document. The ~<base>~ tag must have either an [[href]] or a target attribute present, or both.

#+begin_src html

 <head>
  <base href="https://www.w3schools.com/" target="_blank">
</head>

<body>
<img src="images/stickman.gif" width="24" height="39" alt="Stickman">
<a href="tags/tag_base.asp">HTML base Tag</a>
</body>

#+end_src

*** Section
**** header
The ~<header>~ (block) element represents introductory content, typically a group of introductory or navigational aids. It may contain some heading elements but also a logo, a search form, an author name, and other elements.

#+begin_src html

<header>
  <a class="logo" href="#">Cute Puppies Express!</a>
</header>

<article>
  <header>
    <h1>Beagles</h1>
    <time>08.12.2014</time>
  </header>
  <p>I love beagles <em>so</em> much! Like, really, a lot. They’re
  adorable and their ears are so, so snuggly soft!</p>
</article>

#+end_src

**** main
The ~<main>~ (block) element represents the dominant content of the [[body][<body>]] of a document. The main content area consists of content that is directly related to or expands upon the central topic of a document, or the central functionality of an application.

A document mustn't have more than one ~<main>~ element that doesn't have the ~hidden~ attribute specified.

#+begin_src html

<header>Gecko facts</header>

<main>
  <p>
    Geckos are a group of usually small, usually nocturnal lizards. They
    are found on every continent except Australia.
  </p>

  <p>Many species of gecko have adhesive toe pads which enable them to
     climb walls and even windows.</p>
</main>

#+end_src

**** article
The ~<article>~ (block) element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication). Examples include: a forum post, a magazine or newspaper article, or a blog entry, a product card, a user-submitted comment, an interactive widget or gadget, or any other independent item of content.

A given document can have multiple articles in it; for example, on a blog that shows the text of each article one after another as the reader scrolls, each post would be contained in an ~<article>~ element, possibly with one or more [[section][<section>]] within.

#+begin_src html

<article class="forecast">
  <h1>Weather forecast for Seattle</h1>
  <article class="day-forecast">
    <h2>03 March 2018</h2>
    <p>Rain.</p>
  </article>
  <article class="day-forecast">
    <h2>04 March 2018</h2>
    <p>Periods of rain.</p>
  </article>
  <article class="day-forecast">
    <h2>05 March 2018</h2>
    <p>Heavy rain.</p>
  </article>
</article>

#+end_src

**** section
The ~<section>~ (block) element represents a generic standalone section of a document, which doesn't have a more specific semantic element to represent it. Sections should always have a heading, with very few exceptions.

#+begin_src html

<h1>Choosing an Apple</h1>
<section>
  <h2>Introduction</h2>
  <p>This document provides a guide to help with the important task of
     choosing the correct Apple.</p>
</section>

<section>
  <h2>Criteria</h2>
  <p>
    There are many different criteria to be considered when choosing an
    Apple — size, color, firmness, sweetness, tartness...
  </p>
</section>

#+end_src

**** nav
The ~<nav>~ (block) element represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes.

#+begin_src html

<nav class="crumbs">
  <ol>
    <li class="crumb"><a href="#">Bikes</a></li>
    <li class="crumb"><a href="#">BMX</a></li>
    <li class="crumb">Jump Bike 3000</li>
  </ol>
</nav>

<h1>Jump Bike 3000</h1>
<p>
  This BMX bike is a solid step into the pro world. It looks as legit
  as it rides and is built to polish your skills.
</p>

#+end_src

**** h1-h6
The ~<h1>~ to ~<h6>~ (block) tags are used to define six levels of section headings. ~<h1>~ defines the most important heading. ~<h6>~ defines the least important heading. Note: Only use one ~<h1>~ per page - this should represent the main heading/subject for the whole page. Also, do not skip heading levels - start with ~<h1>~, then use ~<h2>~, and so on.

#+begin_src html

<h1>Beetles</h1>
<h2>External morphology</h2>
<h3>Head</h3>
<h4>Mouthparts</h4>
<h3>Thorax</h3>
<h4>Prothorax</h4>
<h4>Pterothorax</h4>

#+end_src

**** hgroup
The ~<hgroup>~ HTML element represents a heading and related content. It allows the grouping of a heading with any secondary content, such as subheadings, an alternative title, or tagline. Each of these types of content represented as a [[p][<p>]] element within the ~<hgroup>~.

The ~<hgroup>~ itself has no impact on the document outline of a web page. Rather, the single allowed heading within the ~<hgroup>~ contributes to the document outline.

#+begin_src html

<hgroup>
  <h1>Frankenstein</h1>
  <p>Or: The Modern Prometheus</p>
</hgroup>
<p>
  Victor Frankenstein, a Swiss scientist, has a great ambition: to
  create intelligent life. But when his creature first stirs, he
  realizes he has made a monster. A monster which, abandoned by his
  master and shunned by everyone who sees it, follows Dr Frankenstein to
  the very ends of the earth.
</p>

#+end_src

**** aside
The ~<aside>~ (block) element represents a portion of a document whose content is only indirectly related to the document's main content. Asides are frequently presented as sidebars or call-out boxes.

#+begin_src html

<p>
  Salamanders are a group of amphibians with a lizard-like appearance,
  including short legs and a tail in both larval and adult forms.
</p>

<aside>
  <p>The Rough-skinned Newt defends itself with a deadly neurotoxin.</p>
</aside>

<p>
  Several species of salamander inhabit the temperate rainforest of the
  Pacific Northwest, including the Ensatina, the Northwestern Salamander
  and the Rough-skinned Newt. Most salamanders are nocturnal, and hunt
  for insects, worms and other small creatures.
</p>

#+end_src

**** footer
The ~<footer>~ (block) element represents a footer for its nearest ancestor sectioning content or sectioning root element. A ~<footer>~ typically contains information about the author of the section, copyright data or links to related documents.

#+begin_src html

<article>
  <h1>How to be a wizard</h1>
  <ol>
    <li>Grow a long, majestic beard.</li>
    <li>Wear a tall, pointed hat.</li>
    <li>Have I mentioned the beard?</li>
  </ol>
  <footer>
    <p>© 2018 Gandalf</p>
  </footer>
</article>

#+end_src

**** search
The ~<search>~ element is a container representing the parts of the document or application with form controls or other content related to performing a search or filtering operation. The ~<search>~ element semantically identifies the purpose of the element's contents as having search or filtering capabilities. The search or filtering functionality can be for the website or application, the current web page or document, or the entire Internet or subsection thereof.

#+begin_src html

<header>
  <h1>Movie website</h1>
  <search>
    <form action="./search/">
      <label for="movie">Find a Movie</label>
      <input type="search" id="movie" name="q" />
      <button type="submit">Search</button>
    </form>
  </search>
</header>

#+end_src

**** address
The ~<address>~ (block) tag defines the contact information for the author/owner of a document or an article. The contact information can be an email address, URL, physical address, phone number, social media handle, etc. The text in the ~<address>~ element usually renders in italic, and browsers will always add a line break before and after the ~<address>~ element.

#+begin_src html

<address>
Written by <a href="mailto:webmaster@example.com">Jon Doe</a>.<br>
Visit us at:<br>
Example.com<br>
Box 564, Disneyland<br>
USA
</address>

#+end_src

*** Text content
**** p
The ~<p>~ (block) tag defines a paragraph. Browsers automatically add a single blank line before and after each ~<p>~ element.

#+begin_src html

<p>This is some text in a paragraph.</p>

#+end_src

**** pre
The ~<pre>~ (block) tag defines preformatted text. Text in a ~<pre>~ element is displayed in a fixed-width font, and the text preserves both spaces and line breaks. The text will be displayed exactly as written in the HTML source code.

*Tip*: Useful for writing progra code.

#+begin_src html

<figure>
  <pre role="img" aria-label="ASCII COW">
      ___________________________
  &lt; I'm an expert in my field. &gt;
      ---------------------------
          \   ^__^
           \  (oo)\_______
              (__)\       )\/\
                  ||----w |
                  ||     ||
  </pre>
  <figcaption id="cow-caption">
    A cow saying, "I'm an expert in my field." The cow is
    illustrated using preformatted text characters.
  </figcaption>
</figure>

#+end_src

**** hr
~<hr>~ (self-closing) elements create a horizontal rule in the document that denotes a thematic change in the text (such as a change in topic or scene). Visually it just looks like a horizontal line.

#+begin_src html

<p>
  Ron was backed into a corner by the marauding netherbeasts. Scared, but
  determined to protect his friends, he raised his wand ...
</p>
<hr />
<p>
  Meanwhile, Harry was sitting at home, staring at his royalty statement
  and pondering when the next spin off series would come out ...
</p>

#+end_src

**** blockquote
The ~<blockquote>~ (block) tag specifies a section that is *long* quoted from another source (contain their own paragraph).

*Tip*: Use [[q][<q>]] for inline (short) quotations.

#+begin_src html

<blockquote cite="http://www.worldwildlife.org/who/index.html">
For 50 years, WWF has been protecting the future of nature. The
world's leading conservation organization, WWF works in 100 countries
and is supported by 1.2 million members in the United States and close
to 5 million globally.
</blockquote>

#+end_src

*** Inline text
**** a
The ~<a>~ (inline) tag defines a hyperlink, which is used to link from one page to another. The most important attribute of the ~<a>~ element is the [[href]] attribute, which indicates the link's destination.

#+begin_src html

<a href="https://www.w3schools.com">Visit W3Schools.com!</a>

<a href="mailto:lopez@example.com">La dirección de López</a>

#+end_src

**** em
The ~<em>~ (inline) tag is used to define emphasized text. The content inside is typically displayed in italic. A screen reader will pronounce the words in ~<em>~ with an emphasis, using verbal stress.

Typically this element is displayed in italic type. However, it should not be used to apply italic styling; use the CSS ~font-style~ property for that purpose. Use the [[cite][<cite>]] element to mark the title of a work (book, play, song, etc.). Use the [[i][<i>]] element to mark text that is in an alternate tone or mood, which covers many common situations for italics such as scientific names or words in other languages. Use the [[strong][<strong>]] element to mark text that has greater importance than surrounding text.

~<i>~ vs. ~<em>~
By default, the visual result is the same. However, the semantic meaning is different. The ~<em>~ element represents stress emphasis of its contents, while the ~<i>~ element represents text that is set off from the normal prose, such as a foreign word, fictional character thoughts, or when the text refers to the definition of a word instead of representing its semantic meaning. (The title of a work, such as the name of a book or movie, should use <cite>.)

An example for ~<em>~ could be: "Just do it already!", or: "We had to do something about it". A person or software reading the text would pronounce the words in italics with an emphasis, using verbal stress.

An example for ~<i>~ could be: "The Queen Mary sailed last night". Here, there is no added emphasis or importance on the word "Queen Mary". It is merely indicated that the object in question is not a queen named Mary, but a ship named Queen Mary. Another example for <i> could be: "The word the is an article".

#+begin_src html

<p>We <em>cannot</em> live like this.</p>

#+end_src

**** i
The ~<i>~ (inline) element represents a range of text that is set off from the normal text for some reason, such as idiomatic text, technical terms, taxonomical designations, among others. Historically, these have been presented using italicized type, which is the original source of the ~<i>~ naming of this element.

Be sure the text in question is not actually more appropriately marked up with another element. Use [[em][<em>]] to indicate stress emphasis.

#+begin_src html

<p>I looked at it and thought <i>This can't be real!</i></p>

<p><i>Musa</i> is one of two or three genera in the family <i>Musaceae</i>; it
  includes bananas and plantains.</p>

<p>
  The term <i>bandwidth</i> describes the measure of how much information can
  pass through a data connection in a given amount of time.
</p>

#+end_src

**** strong
The ~<strong>~ (inline) tag is used to define text with strong importance, seriousness, or urgency. Typically this element is rendered by default using a bold font weight. However, it should not be used to apply bold styling; use the CSS font-weight property for that purpose. Use the [[b][<b>]] element to draw attention to certain text without indicating a higher level of importance. Use the [[em][<em>]] element to mark text that has stress emphasis.

Another accepted use for ~<strong>~ is to denote the labels of paragraphs which represent notes or warnings within the text of a page.

~<b>~ vs. ~<strong>~
The ~<strong>~ element is for content that is of greater importance, while the ~<b>~ element is used to draw attention to text without indicating that it's more important.

It may help to realize that both are valid and semantic elements in HTML and that it's a coincidence that they both have the same default styling (boldface) in most browsers (although some older browsers actually underline ~<strong>~). Each element is meant to be used in certain types of scenarios, and if you want to bold text for decoration, you should instead actually use the CSS font-weight property.

~<em>~ vs. ~<strong>~
While ~<em>~ is used to change the meaning of a sentence as spoken emphasis does ("I /love/ carrots" vs. "I love /carrots/"), ~<strong>~ is used to give portions of a sentence added importance (e.g., "*Warning*! This is *very dangerous*.").

#+begin_src html

<p>
  ... the most important rule, the rule you can never forget, no matter
  how much he cries, no matter how much he begs: <strong>never feed him
  after midnight</strong>.
</p>

#+end_src

**** b
The ~<b>~ (inline) element is used to draw the reader's attention to the element's contents, which are not otherwise granted special importance. This was formerly known as the Boldface element, and most browsers still draw the text in boldface. However, you should not use ~<b>~ for styling text or granting importance. If you wish to create boldface text, you should use the CSS font-weight property. If you wish to indicate an element is of special importance, you should use the [[strong][<strong>]] element.

Use the ~<b>~ for cases like keywords in a summary, product names in a review, or other spans of text whose typical presentation would be boldfaced (but not including any special importance).

Do not confuse the ~<b>~ element with the ~<strong>~, [[em][<em>]], or [[mark][<mark>]] elements. The ~<strong>~ element represents text of certain importance, ~<em>~ puts some emphasis on the text and the ~<mark>~ element represents text of certain relevance. The ~<b>~ element doesn't convey such special semantic information; use it only when no others fit.

#+begin_src html

<p>
  The two most popular science courses offered by the school are <b
  class="term">chemistry</b> (the study of chemicals and the composition
  of substances) and <b class="term">physics</b> (the study of the
  nature and properties of matter and energy).
</p>

#+end_src

**** mark
The ~<mark>~ (inline) element represents text which is marked or highlighted for reference or notation purposes due to the marked passage's relevance in the enclosing context.

#+begin_src html

<p>Search results for "salamander":</p>

<hr />

<p>Several species of <mark>salamander</mark> inhabit the temperate
  rainforest of the Pacific Northwest.</p>

<p>Most <mark>salamander</mark>s are nocturnal, and hunt for insects,
  worms, and other small creatures.</p>

#+end_src

**** q
The ~<q>~ (inline) tag defines a *short* quotation (frases, refranes...). Browsers normally insert quotation marks around the quotation.

*Tip*: Use [[blockquote][<blockquote>]] for long quotations.

*Note*: What is the difference between ~cite~ and ~q~? Well, the normal thing is to put in ~cite~ the origin of the quote (the author, the book, the person who said that, etc.) and in ~q~ the quote itself. However, both ~q~ and ~blockquote~ have a cite attribute where you can put the source of the citation, although it usually won't be directly represented.

#+begin_src html

<p>WWF's goal is to: <q>Build a future where people live in harmony with
nature.</q> We hope they succeed.</p>

#+end_src

**** cite
The ~<cite>~ (inline) tag defines the title of a creative work (e.g. a book, a poem, a song, a movie, a painting, a sculpture, etc.).

*Notes*:
- What is the difference between ~<cite>~ and [[q][<q>]]? Well, the normal thing is to put in ~cite~ the origin of the quote (the author, the book, the person who said that, etc.) and in ~q~ the quote itself. However, both ~q~ and [[blockquote][<blockquote>]] have a cite attribute where you can put the source of the citation, although it usually won't be directly represented.
- A person's name is not the title of a work.

#+begin_src html

<p><cite>The Scream</cite> by Edward Munch. Painted in 1893.</p>

#+end_src

**** br
The ~<br>~ (inline) tag inserts a single line break. The ~<br>~ tag is useful for writing addresses or poems.

*Note*: Use the tag to enter line breaks, not to add space between paragraphs.

#+begin_src html

<p>To force<br> line breaks<br> in a text,<br> use the br<br> element.</p>

#+end_src

**** dfn
The ~<dfn>~ (inline) tag stands for the "definition element", and it specifies a term that is going to be defined within the content. The nearest parent of the ~<dfn>~ tag must also contain the definition/explanation for the term.

#+begin_src html

<p>A <dfn id="def-validator">validator</dfn> is a program that checks for
syntax errors in code or documents.</p>

<p><dfn title="HyperText Markup Language">HTML</dfn> is the standard markup
language for creating web pages.</p>

#+end_src

**** abbr
The ~<abbr>~ (inline) tag defines an abbreviation or an acronym, like "HTML", "CSS", "Mr.", "Dr.", "ASAP", "ATM".

*Tip*: Use the global title attribute to show the description for the abbreviation/acronym when you mouse over the element.

#+begin_src html

The <abbr title="World Health Organization">WHO</abbr> was founded in 1948.

#+end_src

**** ins
The ~<ins>~ (inline) tag defines a text that has been inserted into a document. Browsers will usually underline inserted text.

#+begin_src html

 <p>My favorite color is <del>blue</del> <ins>red</ins>!</p>

#+end_src

**** del
The ~<del>~ (inline) tag defines text that has been deleted from a document. Browsers will usually strike a line through deleted text.

#+begin_src html

 <p>My favorite color is <del>blue</del> <ins>red</ins>!</p>

#+end_src

*** Lists
**** ol
The ~<ol>~ (block) tag defines an *ordered list*. An ordered list can be numerical or alphabetical. The [[li][<li>]] tag is used to define each list item.

#+begin_src html

<ol start="50">
  <li>Coffee</li>
  <li>Tea</li>
  <li>Milk</li>
</ol>

#+end_src

**** ul
The ~<ul>~ (block) tag defines an *unordered* (bulleted) *list*. Use the ~<ul>~ tag together with the [[li][<li>]] tag to create unordered lists.

#+begin_src html

 <ul>
  <li>Coffee</li>
  <li>Tea</li>
  <li>Milk</li>
</ul>

#+end_src

**** li
The ~<li>~ tag defines a *list item*.

#+begin_src html

<ol>
  <li>Coffee</li>
  <li>Tea</li>
  <li>Milk</li>
</ol>

#+end_src

**** dl
The ~<dl>~ (block) tag defines a *description list*. The ~<dl>~ tag is used in conjunction with ~<dt>~ (defines terms/names) and ~<dd>~ (describes each term/name).

#+begin_src html

 <dl>
  <dt>Coffee</dt>
  <dd>Black hot drink</dd>
  <dt>Milk</dt>
  <dd>White cold drink</dd>
</dl>

#+end_src

*** Media
**** img
The ~<img>~ (inline) tag is used to embed an image in an HTML page. Images are not technically inserted into a web page; images are linked to web pages. The ~<img>~ tag creates a holding space for the referenced image.

*Tip*: To link an image to another document, simply nest the ~<img>~ tag inside an [[a][<a>]] tag.

The ~<img>~ tag has two required attributes:
- [[src]] :: Specifies the path to the image
- [[alt]] :: Specifies an alternate text for the image, if the image for some reason cannot be displayed

#+begin_src html

<!-- How to insert an image: -->
<img src="img_girl.jpg" alt="Girl in a jacket" width="500" height="600">

<!-- How to add a hyperlink to an image: -->
<a href="https://www.w3schools.com">
<img src="w3html.gif" alt="W3Schools.com" width="100" height="132">
</a>

#+end_src

**** iframe
The ~<iframe>~ (block) tag specifies an inline frame. An inline frame is used to embed another document within the current HTML document.

*Tip*: It is a good practice to always include a title attribute for the ~<iframe>~. This is used by screen readers to read out what the content of the ~<iframe>~ is.

#+begin_src html

<iframe src="https://www.w3schools.com" title="W3Schools Free Online Web Tutorials"></iframe>

#+end_src

**** video
The ~<video>~ (block) tag is used to embed video content in a document, such as a movie clip or other video streams.

#+begin_src html

<video width="320" height="240" controls>
  <source src="movie.mp4" type="video/mp4">
  <source src="movie.ogg" type="video/ogg">
  Your browser does not support the video tag.
</video>

#+end_src

**** audio
The ~<audio>~ (block) tag is used to embed sound content in a document, such as music or other audio streams.

#+begin_src html

<audio controls>
  <source src="horse.ogg" type="audio/ogg">
  <source src="horse.mp3" type="audio/mpeg">
  Your browser does not support the audio tag.
</audio>

#+end_src

*** Forms and Input
**** form
The ~<form>~ (block) tag is used to create an HTML form for user input.

The first example code describes a form with two fields: a small one asking for a name and a larger one to write a message in. When you click the Send button, the form is *submitted*, meaning that the content of its field is packed into an HTTP request and the browser navigates to the result of that request.

#+begin_src html

<form method="GET" action="example/message.html">
  <p>Name: <input type="text" name="name"></p>
  <p>Message:<br><textarea name="message"></textarea></p>
  <p><button type="submit">Send</button></p>
</form>


<form action="/action_page.php" method="get">
  <label for="fname">First name:</label>
  <input type="text" id="fname" name="fname"><br><br>
  <label for="lname">Last name:</label>
  <input type="text" id="lname" name="lname"><br><br>
  <input type="submit" value="Submit">
</form>

#+end_src

**** label
The ~<label>~ (inline) tag defines a label for some elements.

*Tip*: The ~for~ attribute of ~<label>~ must be equal to the [[id]] attribute of the related element to bind them together. A label can also be bound to an element by placing the element inside the ~<label>~ element.

#+begin_src html

<form action="/action_page.php">
  <input type="radio" id="html" name="fav_language" value="HTML">
  <label for="html">HTML</label><br>
  <input type="radio" id="css" name="fav_language" value="CSS">
  <label for="css">CSS</label><br>
  <input type="radio" id="javascript" name="fav_language" value="JavaScript">
  <label for="javascript">JavaScript</label><br><br>
  <input type="submit" value="Submit">
</form>

#+end_src

**** input
The ~<input>~ (inline) tag specifies an input field where the user can enter data. This element is the most important form element.

*Tip*: Always use the ~<label>~ tag to define labels for ~<input type="text">~, ~<input type="checkbox">~, ~<input type="radio">~, ~<input type="file">~, and ~<input type="password">~.

#+begin_src html

<form action="/action_page.php">
  <label for="fname">First name:</label>
  <input type="text" id="fname" name="fname"><br><br>
  <label for="lname">Last name:</label>
  <input type="text" id="lname" name="lname"><br><br>
  <input type="submit" value="Submit">
</form>


<p><input type="text" value="abc"> (text)</p>
<p><input type="password" value="abc"> (password)</p>
<p><input type="checkbox" checked> (checkbox)</p>
<p><input type="radio" value="A" name="choice">
   <input type="radio" value="B" name="choice" checked>
   <input type="radio" value="C" name="choice"> (radio)</p>
<p><input type="file"> (file)</p>

#+end_src

**** select
The ~<select>~ (block) element is used to create a drop-down list. The ~<select>~ element is most often used in a form, to collect user input.

The ~name~ attribute is needed to reference the form data after the form is submitted (if you omit the name attribute, no data from the drop-down list will be submitted).

The [[id]] attribute is needed to associate the drop-down list with a label. The [[option][<option>]] tags inside the ~<select>~ element define the available options in the drop-down list.

*Tip*: Always add the [[label][<label>]] tag for best accessibility practices!

#+begin_src html

<label for="cars">Choose a car:</label>

<select name="cars" id="cars">
  <option value="volvo">Volvo</option>
  <option value="saab">Saab</option>
  <option value="mercedes">Mercedes</option>
  <option value="audi">Audi</option>
</select>

#+end_src

**** option
The ~<option>~ tag defines an option in a select list.

*Note*: The ~<option>~ tag can be used without any attributes, but you usually need the value attribute, which indicates what is sent to the server on form submission.

#+begin_src html

<label for="cars">Choose a car:</label>

<select id="cars">
  <option value="volvo">Volvo</option>
  <option value="saab">Saab</option>
  <option value="opel">Opel</option>
  <option value="audi">Audi</option>
</select>

#+end_src

**** button
The ~<button>~ (inline) tag defines a clickable button. Inside a ~<button>~ element you can put text (and tags like [[i][<i>]], [[b][<b>]], [[strong][<strong>]], [[br][<br>]], [[img][<img>]], etc.). That is not possible with a button created with the [[input][<input>]] element!

*Tip*: Always specify the type attribute for a ~<button>~ element, to tell browsers what type of button it is.

#+begin_src html

<button type="button">Click Me!</button>

#+end_src

*Note*: Some attributes can contain a JavaScript program. The [[button][<button>]] tag shown next (which shows up as a button) has an ~onclick~ attribute. The attribute’s value will be run whenever the button is clicked.

#+begin_src html

<button onclick="alert('Boom!');">DO NOT PRESS</button>
<!-- Note that I had to use single quotes for the string in the onclick -->
<!-- attribute because double quotes are already used to quote the whole -->
<!-- attribute. I could also have used &quot;. -->

#+end_src


**** optgroup
The ~<optgroup>~ (block) tag is used to group related options in a [[select][<select>]] element (drop-down list).

#+begin_src html

<label for="cars">Choose a car:</label>
<select  name="cars" id="cars">
  <optgroup label="Swedish Cars">
    <option value="volvo">Volvo</option>
    <option value="saab">Saab</option>
  </optgroup>
  <optgroup label="German Cars">
    <option value="mercedes">Mercedes</option>
    <option value="audi">Audi</option>
  </optgroup>
</select>

#+end_src

**** fieldset
The ~<fieldset>~ (block) tag is used to group related elements in a form. The ~<fieldset>~ tag draws a box around the related elements.

#+begin_src html

 <form action="/action_page.php">
  <fieldset>
    <legend>Personalia:</legend>
    <label for="fname">First name:</label>
    <input type="text" id="fname" name="fname"><br><br>
    <label for="lname">Last name:</label>
    <input type="text" id="lname" name="lname"><br><br>
    <label for="email">Email:</label>
    <input type="email" id="email" name="email"><br><br>
    <label for="birthday">Birthday:</label>
    <input type="date" id="birthday" name="birthday"><br><br>
    <input type="submit" value="Submit">
  </fieldset>
</form>

#+end_src

**** textarea
The ~<textarea>~ (inline) tag defines a multi-line text input control.

*Tip*: Always add the [[label][<label>]] tag for best accessibility practices!

#+begin_src html

<label for="w3review">Review of W3Schools:</label>

<textarea id="w3review" name="w3review" placeholder="Something here..."
          rows="4" cols="50">
  At w3schools.com you will learn how to make a website. They offer
  free tutorials in all web development technologies.
</textarea>

#+end_src

**** table
The ~<table>~ (block) tag defines an HTML table. An HTML table consists of one ~<table>~ element and one or more ~<tr>~, ~<th>~, and ~<td>~ elements. The ~<tr>~ element defines a table row, the ~<th>~ element defines a table header, and the ~<td>~ element defines a table cell. An HTML table may also include ~<caption>~, ~<colgroup>~, ~<thead>~, ~<tfoot>~, and ~<tbody>~ elements.

#+begin_src html

<table>
  <tr>
    <th>Month</th>
    <th>Savings</th>
  </tr>
  <tr>
    <td>January</td>
    <td>$100</td>
  </tr>
</table>

#+end_src

** Attributes
*** Definition
Elements in HTML have attributes; these are additional values that configure the elements or adjust their behavior in various ways to meet the criteria the users want. HTML attributes provide additional information about HTML elements.

- All HTML elements can have *attributes*
- Attributes are always specified in *the start tag*
- Attributes usually come in name/value pairs like: ~name="value"~

*Note*: Some attributes can contain a JavaScript program. The [[button][<button>]] tag shown next (which shows up as a button) has an ~onclick~ attribute. The attribute’s value will be run whenever the button is clicked.

#+begin_src html

<button onclick="alert('Boom!');">DO NOT PRESS</button>
<!-- Note that I had to use single quotes for the string in the onclick -->
<!-- attribute because double quotes are already used to quote the whole -->
<!-- attribute. I could also have used &quot;. -->

#+end_src

*** id
The ~id~ global attribute defines an identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).

An id's value must not contain whitespace (spaces, tabs, etc.). Browsers treat non-conforming IDs that contain whitespace as if the whitespace is part of the ID. In contrast to the [[class]] attribute, which allows space-separated values, elements can only have one single ID value.

#+begin_src html

<p>A normal, boring paragraph. Try not to fall asleep.</p>

<p id="exciting">The most exciting paragraph. One of a kind!</p>

#+end_src

*** class
The ~class~ global attribute is a space-separated list of the case-sensitive classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the class selectors or functions like the DOM method ~document.getElementsByClassName~. The ~class~ attribute provides a way of classifying similar elements.

#+begin_src html

<p>Narrator: This is the beginning of the play.</p>

<p class="note editorial">Above point sounds a bit obvious. Remove/rewrite?</p>

<p>Narrator: I must warn you now folks that this beginning is very exciting.</p>

<p class="note">[Lights go up and wind blows; Caspian enters stage right]</p>

#+end_src

*** title
The ~title~ attribute defines some extra information about an element. In most browsers this attribute is displayed as what is often referred to as a tooltip.

The value of the title attribute will be displayed as a tooltip when you mouse over the element:

The main use of the title attribute is to label [[iframe][<iframe>]] elements for assistive technology.

#+begin_src html

<p title="I'm a tooltip">This is a paragraph.</p>

#+end_src

*** href
The [[a][<a>]] tag defines a hyperlink. The ~href~ attribute specifies the URL of the page the link goes to.

#+begin_src html

<a href="https://www.w3schools.com">Visit W3Schools</a>

#+end_src

*** src
The [[img][<img>]] tag is used to embed an image in an HTML page. The ~src~ attribute specifies the path to the image to be displayed.

*Note*: In order for the element to be the destination of a hyperlink, its ~name~ attribute must be given a value.

#+begin_src html

<img src="img_girl.jpg">

#+end_src

*** width and height
The [[img][<img>]] tag should also contain the ~width~ and ~height~ attributes, which specify the width and height of the image (in pixels).

#+begin_src html

<img src="img_girl.jpg" width="500" height="600">

#+end_src

*** alt
The required ~alt~ attribute for the [[img][<img>]] tag specifies an alternate text for an image, if the image for some reason cannot be displayed. This can be due to a slow connection, or an error in the [[src]] attribute, or if the user uses a screen reader.

#+begin_src html

<img src="img_girl.jpg" alt="Girl with a jacket">

#+end_src

*** style
The ~style~ attribute is used to add styles to an element, such as color, font, size, and more.

#+begin_src html

<p style="color:red;">This is a red paragraph.</p>

#+end_src

** DOM
A DOM has a tree-like structure. Each [[Element][element]], [[Attributes][attribute]], and piece of text in the markup language becomes a DOM node in the tree structure. The nodes are defined by their relationship to other DOM nodes. Some elements are parents of child nodes, and child nodes have siblings.

Understanding the DOM helps you design, debug and maintain your CSS because the DOM is where your CSS and the document's content meet up.

#+begin_src html

<p>
  Let's use:
  <span>Cascading</span>
  <span>Style</span>
  <span>Sheets</span>
</p>

<!-- In the DOM, the node corresponding to our <p> element is a parent. Its -->
<!-- children are a text node and the three nodes corresponding to our -->
<!-- <span> elements. The SPAN nodes are also parents, with text nodes as -->
<!-- their children: -->
P
├─ "Let's use:"
├─ SPAN
│  └─ "Cascading"
├─ SPAN
│  └─ "Style"
└─ SPAN
    └─ "Sheets"

#+end_src

* CSS
** Brief
*** Style sheet
Cascading Style Sheets is a style sheet language used for describing the presentation of a document written in a markup language such as HTML or XML. CSS describes how elements should be rendered on screen, on paper, in speech, or on other media.

A style sheet consists of a list of rules. Each rule or rule-set consists of one or more [[Selector][selectors]], and a *declaration block*.

*** Adding CSS styles
The [[href]] attribute of the [[link][<link>]] element needs to reference a file on your file system.

#+begin_src html

<!-- 1. Placed in an external CSS file -->
<link href="path/to/file.css" rel="stylesheet" type="text/css">

<!-- 2. Inside an opening tag -->
<h1 style="color: red;">Chapter 1.</h1>

<!-- 3. Inside body -->
<style>
    h1 {
        color: red;
    }
</style>

#+end_src

*** Example website logical sections in style sheet
It is a good idea to have all of the common styling first in the stylesheet. This means all of the styles which will generally apply unless you do something special with that element.

You will typically have rules set up for:
- [[body]]
- [[p]]
- [[h1-h6][h1, h2, h3, h4, h5]]
- [[ul]] and [[ol]]
- The [[table]] properties
- Links

*Tips* on building CSS file:
  - use ~:first-child~, ~:last-child~ and ~:nth-child~ to get at non-classed elements
  - use ~::before~ and ~::after~ to create pseudo-elements for extra styling
  - don't rely on the extra [[div][divs]] at the bottom. Use ~::before~ and ~::after~ instead

#+begin_src css

/* we are providing default styling for the type on the site */
/* || GENERAL STYLES */

body {
  /* … */
}

h1,
h2,
h3,
h4 {
  /* … */
}

ul {
  /* … */
}

blockquote {
  /* … */
}

/* we could define a few utility classes */
/* If you have a few styling choices you know you will want to apply */
/* to lots of different elements */
/* || UTILITIES */

.nobullets {
  list-style: none;
  margin: 0;
  padding: 0;
}

/* … */

/* we can add everything that is used sitewide */
/* || SITEWIDE */

.main-nav {
  /* … */
}

.logo {
  /* … */
}

/* we will include CSS for specific things, broken down by the context, */
/* page, or even component in which they are used. */
/* || STORE PAGES */

.product-listing {
  /* … */
}

.product-box {
  /* … */
}

#+end_src

*** Order of overriding declarations style sheets
Remember that you can create a fallback for older browsers by putting the fallback version of a declaration first, followed by the version that works across newer browsers only. Older browsers will apply the first declaration and ignore the second one, whereas newer browsers will apply the first one, then override it with the second one.

Conflicting declarations will be applied in the following order, with later ones overriding earlier ones:

1. Declarations in user agent style sheets (e.g., the browser's default styles, used when no other styling is set).
2. Normal declarations in user style sheets (custom styles set by a user).
3. Normal declarations in author style sheets (these are the styles set by us, the web developers).
4. Important declarations in author style sheets.
5. Important declarations in user style sheets.
6. Important declarations in user agent style sheets.

*** Work CSS
1. The browser loads the HTML (e.g. receives it from the network).
2. It converts the HTML into a [[DOM]] (Document Object Model). The DOM represents the document in the computer's memory.
3. The browser then fetches most of the resources that are linked to by the HTML document, such as embedded images, videos, and even linked CSS! JavaScript is handled a bit later on in the process.
4. The browser parses the fetched CSS, and sorts the different rules by their selector types into different "buckets", e.g. element, class, ID, and so on. Based on the selectors it finds, it works out which rules should be applied to which nodes in the DOM, and attaches style to them as required (this intermediate step is called a render tree).
5. The render tree is laid out in the structure it should appear in after the rules have been applied to it.
6. The visual display of the page is shown on the screen (this stage is called painting).

What happens if a browser encounters CSS it doesn't understand? The answer is that it does nothing, and just moves on to the next bit of CSS!

** Selector
*** Brief
CSS selectors are used to "find" (or select) the HTML elements you want to style.

Selectors, whether used in CSS or JavaScript, enable targeting HTML elements based on their type, attributes, current states, and even position in the DOM. Combinators allow you to be more precise when selecting elements by enabling selecting elements based on their relationship to other elements.

We can divide CSS selectors into five categories:

- Simple selectors :: select elements based on name, id, class
- Attribute selectors :: select elements based on an attribute or attribute value
- Pseudo-class selectors :: select elements based on a certain state
- Pseudo-elements selectors :: select and style a part of an element
- Combinator selectors :: select elements based on a specific relationship between them

| /Type/         | /Selector/   | /Description/                             |
|--------------+------------+-----------------------------------------|
| Element      | p          | all <p> elements                        |
| ID           | #my-id     | the element with id="my-id"             |
| Class        | .my-class  | all elements with class="my-class"      |
| Attribute    | img[src]   | all elements with img[src]              |
| Pseudo-class | a:hover    | all elements with a:hover               |
| Combined     | p.my-class | only <p> elements with class="my-class" |
| Elements     | div, p     | all <div> elements and all <p> elements |
| All          | *          | all elements                            |

*** Elements (,)
Targeting an *element selector* — this is a selector that directly matches an HTML element name. You can target multiple selectors at the same time by separating the selectors with a comma.

- id selector :: an identifier unique within the document, denoted in the selector language by a hash ~#~ prefix
- universal selector :: selects all HTML elements on the page, denoted by a star ~*~ prefix

*Note*: HTML elements can also refer to more than one class.

#+begin_src css

/* Target all paragraphs in the document */
p { color: green; }

/* Rule will be applied to the HTML element with id="my-id": */
#my-id { color: green; }

/* Grouping: selects all paragraphs and all list items to be green */
p, li { color: green; }

 /* Will affect every HTML element on the page */
 * { color: green; }

#+end_src

*** Attribute (^, $, |)
The ~[attribute]~ selector is used to select elements with a specified attribute.

The ~[attribute="value"]~ selector is used to select elements with a specified attribute and value.

#+begin_src css

/* Selects all <a> elements with a target attribute: */
a[target] { background-color: yellow; }

/* Selects all <a> elements with a target="_blank" attribute: */
a[target="_blank"] { background-color: yellow; }

/* Selects all elements with a title attribute that contains a */
/* space-separated list of words, one of which is "flower": */
[title~="flower"] { border: 5px solid yellow; }
/* The example above will match elements with title="flower", */
/* title="summer flower", and title="flower new", but not */
/* title="my-flower" or title="flowers". */

/* Selects all elements with a class attribute value that starts with "top": */
/* Note: The value does not have to be a whole word! */
[class^="top"] { background: yellow; }

/* Selects all elements with a class attribute value that ends with "test": */
/* Note: The value does not have to be a whole word! */
[class$="test"] { background: yellow; }

/* Select elements with the specified attribute, whose value can be */
/* exactly the specified value, or the specified value followed by a */
/* hyphen (-). */
[class|="top"] { background: yellow; }

#+end_src

*** Subset of the elements (class)
To select a *subset of the elements* without changing the others, you can add a *class* to your HTML element and target that class in your CSS.

- class selector :: an identifier that can classify multiple elements in a document, denoted by a dot ~.~ prefix

#+begin_src css

/* Target all element that has a class of special */
.special { font-weight: bold; }

/* Target any li element that has a class of special */
li.special { font-weight: bold; }

/* Target any li and span element that has a class of special */
li.special, span.special { font-weight: bold; }

#+end_src

HTML elements can also refer to more than one class.

#+begin_src html

<!-- <p> will be styled according to class="center" and class="large". -->
<p class="center large">This paragraph refers to two classes.</p>

#+end_src

*** Base on state (pseudo-classes)
Styling things based on *state* of a element. Pseudo-classes are used in CSS selectors to permit formatting based on information that is not contained in the document tree.

For example: to select an element ~a~, the selector ~a~ would be enough, but what if I want to give a different appearance to the visited links and those that have not yet been visited?

A *pseudo-class* classifies document elements, such as ~:link~ or ~:visited~, whereas a *pseudo-element* makes a selection that may consist of partial elements, such as ~::first-line~ or ~::first-letter~.

*Note*: ~a:hover~ MUST come after ~a:link~ and ~a:visited~ in the CSS definition in order to be effective! ~a:active~ MUST come after ~a:hover~ in the CSS definition in order to be effective!

#+begin_src css

/* Styles unvisited links pink and visited links green. */
a:link { color: pink; }

a:visited { color: green; }

/* Removing the underline */
a:hover { text-decoration: none; }

/* selected link */
a:active { color: #0000FF; }

/* pseudo-classes can be combined with HTML classes: */
a.highlight:hover { color: #ff0000; }

/* selector matches any <p> element that is the first child of any element: */
p:first-child { color: blue; }

#+end_src

| /Selector/       | /Example/        | /Example description/                     |
|----------------+----------------+-----------------------------------------|
| :active        | a:active       | the active link                         |
| :checked       | input:checked  | every checked <input> element           |
| :disabled      | input:disabled | every disabled <input> element          |
| :empty         | p:empty        | every <p> element that has no children  |
| :enabled       | input:enabled  | every enabled <input> element           |
| :focus         | input:focus    | the <input> element that has focus      |
| :hover         | a:hover        | links on mouse over                     |
| :visited       | a:visited      | all visited links                       |
| :only-child    | p:only-child   | every <p> that's the only child         |
| :last-child    | p:last-child   | every <p> that's the last child         |
| :last-of-type  | p:last-of-type | every <p> that's the last <p> of parent |
| :link          | a:link         | all unvisited links                     |
| :not(selector) | :not(p)        | every element that is not a <p>         |
| :nth-child(n)  | p:nth-child(2) | every <p> that's the second child       |

*** Base on parts of element (pseudo-elements)
A CSS pseudo-element is used to style specified parts of an element. For example, it can be used to:

- Style the first letter, or line, of an element
- Insert content before, or after, the content of an element

#+begin_src css

/* Formats the first line of the text in all <p> elements: */
p::first-line { color: #ff0000; }
/* The ::first-line can only be applied to block-level elements. */

/* Formats the first letter of the text in all <p> elements:  */
p::first-letter { color: #ff0000; }

/* Pseudo-elements can be combined with HTML classes:  */
p.intro::first-letter { color: #ff0000; }

/* Inserts an image before the content of each <h1> element: */
h1::before { content: url(smiley.gif); }

/* Inserts an image after the content of each <h1> element: */
h1::after { content: url(smiley.gif); }

#+end_src

| /Selector/       | /Example/         | /Example description/               |
|----------------+-----------------+-----------------------------------|
| ::after        | p::after        | Insert content after every <p>    |
| ::before       | p::before       | Insert content before every <p>   |
| ::first-letter | p::first-letter | Selects first letter of every <p> |
| ::first-line   | p::first-line   | Selects first line of every <p>   |
| ::marker       | ::marker        | Selects the markers of list items |
| ::selection    | p::selection    | Selects the portion of an element |
|                |                 | that is selected by a user        |

*** Base on location (SPACE, +)
Styling things based on their *location* in a document

#+begin_src css

/* This selector will select any <em> element that is inside (a */
/* descendant of) an <li> */
li em {   color: rebeccapurple; }

/* Styling a paragraph when it comes directly after a heading at the same */
/* hierarchy level (+ adjacent sibling) */
h1 + p { font-size: 200%; }

#+end_src

*** Combining selectors (SPACE, >, +, ~)
**** Descendant combinator (SPACE)
Combines two selectors such that elements matched by the second selector are selected if they have an ancestor (parent, parent's parent, parent's parent's parent, etc.) element matching the first selector.

#+begin_src css

/* Selects all <p> elements inside <div> elements:  */
div p { background-color: yellow; }

/* selects any <span> that is inside a <p>, which is inside an <article>  */
article p span { }

#+end_src

**** Child combinator (>)
It matches only those elements matched by the second selector that are the *direct children* of elements matched by the first. Descendant elements further down the hierarchy don't match.

#+begin_src css

/* select only <p> elements that are direct children of <article> elements */
article > p { }

#+end_src

**** Adjacent sibling combinator (+)
It matches only those elements matched by the second selector that are the next sibling element of the first selector.

#+begin_src css

/* Selects the first <p> that are placed immediately after <div>: */
div + p { background-color: yellow; }

/* selects any <p> that comes directly after a <ul>, which comes */
/* directly after an <h1> */
h1 + ul + p { }

#+end_src

**** General sibling combinator (~)
When you want to select siblings of an element even if they are not directly adjacent.

#+begin_src css

/* select all <img> elements that come anywhere after <p> elements */
p ~ img {}

#+end_src

**** Combinators

#+begin_src css

/* Style any element with a class of special, which is inside a <p>, */
/* which comes just after an <h1>, which is inside a <body> */
body h1 + p .special { color: yellow; background-color: black; padding: 5px; }

/* select list items with a class of "a" which are direct children of a <ul> */
ul > li[class="a"] { }

#+end_src

** Properties
*** Definition
At its most basic level, CSS consists of two components:

- properties :: these are human-readable identifiers that indicate which stylistic features you want to modify.
- values :: each property is assigned a value. This value indicates how to style the property.

When a property is paired with a value, this pairing is called a *CSS declaration*. CSS declarations are found within CSS Declaration Blocks, which are paired with selectors to produce *CSS rulesets* (or CSS rules).

#+begin_src css

/* The example below contains two rules: one for the h1 selector and one */
/* for the p selector. */
h1 { color: blue; background-color: yellow; }
p { color: red; }

#+end_src

*** inline-size, block-size
**** inline-size
The ~inline-size~ CSS property defines the *horizontal or vertical size of an element's block*, depending on its writing mode. It corresponds to either the ~width~ or the ~height~ property, depending on the value of [[writing-mode]].

If the writing mode is vertically oriented, the value of ~inline-size~ relates to the height of the element; otherwise, it relates to the width of the element. A related property is [[block-size]], which defines the other dimension of the element.

*Note*: The CSS ~inline-size~ and ~block-size~ properties are very similar to CSS properties ~width~ and ~height~, but the ~inline-size~ and ~block-size~ properties are dependent on inline and block directions.

**** block-size
The ~block-size~ CSS property defines the *horizontal or vertical size of an element's block*, depending on its writing mode. It corresponds to either the ~width~ or the ~height~ property, depending on the value of [[writing-mode]].

If the writing mode is vertically oriented, the value of ~block-size~ relates to the width of the element; otherwise, it relates to the height of the element. A related property is [[inline-size]], which defines the other dimension of the element.

**** writing-mode
The ~writing-mode~ CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (~html~ element for HTML documents).

*** Font
**** font
*Shorthand font property*. The first three values ~font-style~, ~font-variant~ and ~font-weigh~ are optional and can appear in any order. The fourth ~font-size~ is required. The fifth ~line-height~, line height is optional and if it appears it must be preceded by a slash. And at the end the typographic family ~font-family~ is mandatory.

#+begin_src css

font : italic small-caps bold 1.5em/3em Arial, sans-serif

#+end_src

**** font-family
Takes font name as values, in order of preference. At the end of the list it is always convenient tu put a generic family name.

#+begin_src css

font-family : Georgia, "Times New Roman", Times, serif;

#+end_src

*** Background
**** background
*Shorthand background property*. All values are optional and can be in any order.

#+begin_src css

/* This one line: */
body {
  background: red url(bg-graphic.png) 10px 10px repeat-x fixed;
  }

/* is equivalent to these five lines: */
body {
  background-color: red;
  background-image: url(bg-graphic.png);
  background-position: 10px 10px;
  background-repeat: repeat-x;
  background-attachment: fixed;
  }

#+end_src

**** background-image
It's a good idea to specify a background image and a background color at the same time, in case image fails to load.

#+begin_src css

body { background-image : url(ajedrez.gif) ; background-color : white }

/* The default value is none. */
p { background-image : none }

#+end_src

**** background-attachment
The image is set to the botton ~fixed~ or moves along the rest of the content  ~scroll~.

#+begin_src css

body {
 background-image : url(ajedrez.gif);
 background-color : white;
 background-repeat : repeat;
 background-attachment : fixed;
}

#+end_src

*** The overflow property
The *overflow* property is how you take control of an element's overflow. It is the way you instruct the browser how it should behave. The default value of overflow is ~visible~. With this default, we can see content when it overflows.

To crop content when it overflows, you can set ~overflow: hidden~. This does exactly what it says: it hides overflow. Beware that this can make some content invisible. You should only do this if hiding content won't cause problems.

Instead, perhaps you would like to add scrollbars when content overflows? Using ~overflow: scroll~, browsers with visible scrollbars will always display them—even if there is not enough content to overflow. This offers the advantage of keeping the layout consistent, instead of scrollbars appearing or disappearing, depending upon the amount of content in the container.

When developing a site, always keep overflow in mind. Test designs with large and small amounts of content. Increase the font sizes of text. Generally ensure that your CSS works in a robust way. Changing the value of overflow to hide content, or to add scrollbars, is likely to be reserved for a few select use cases (for example, where you intend to have a scrolling box).

*** Miscellaneous
**** calc()
Which can do simple math within CSS

#+begin_src css

/* The values define the width of this box to be 90% of the containing */
/* block width, minus 30 pixels. */
.box {
  padding: 10px;
  width: calc(90% - 30px);
  background-color: rebeccapurple;
  color: white;
}

#+end_src

**** Transform functions
***** rotate()

#+begin_src css

.box {
  margin: 30px;
  width: 100px;
  height: 100px;
  background-color: rebeccapurple;
  transform: rotate(0.8turn);
}

#+end_src

**** @rules
CSS @rules (pronounced "at-rules") provide instruction for what CSS should perform or how it should behave. Some @rules are simple with just a keyword and a value.

#+begin_src css

/* Imports a stylesheet into another CSS stylesheet: */
@import "styles2.css";

/* The stylesheet defines a default pink background for the <body> */
/* element. However, a media query follows that defines a blue background */
/* if the browser viewport is wider than 30em. */
body {
  background-color: pink;
}

@media (min-width: 30em) {
  body {
    background-color: blue;
  }
}

#+end_src

**** all
The all shorthand CSS property resets all of an element's properties except unicode-bidi, direction, and CSS Custom Properties. It can set properties to their initial or inherited values, or to the values specified in another cascade layer or stylesheet origin.

#+begin_src css

all: initial;
all: inherit;
all: unset;
all: revert;
all: revert-layer;

#+end_src

** Size
*** The natural or intrinsic size of things
If you place an image on a page and do not change its height or width, either by using attributes on the [[img][<img>]] tag or else by CSS, it will be displayed using that *intrinsic size* (el tamaño que tiene la imagen por defecto).

An empty [[div][<div>]], on the other hand, has no size of its own. If you add a ~<div>~ to your HTML with no content, then give it a border, you will see a line on the page. This is the collapsed border on the element — there is no content to hold it open. If you adding some text inside the empty element. The border now contains that text because the height of the element is defined by the content. Therefore the size of this ~<div>~ in the block dimension comes from the size of the content. Again, this is the intrinsic size of the element — *its size is defined by its content*.

*** Setting a specific size or extrinsic size
**** Extrinsic size
When a size is given to an element (the content of which then needs to fit into that size) we refer to it as an *extrinsic size*.

*Note*: A set height can cause content to overflow if there is more content than the element has space to fit inside it.

**** Using percentages
When using a percentage you need to be aware what it is a percentage of. In the case of a box inside another container, if you give the child box a percentage width it will be a percentage of the width of the parent container.

The percentages resolve against the size of the containing block. With no percentage applied, our ~<div>~ would take up 100% of the available space, as it is a block level element. If we give it a percentage width, this becomes a percentage of the space it would normally fill.

**** Percentage margins and padding
When you use margin and padding set in percentages, the value is calculated from the [[inline-size]] of the containing block — therefore the width when working in a horizontal language.

*** min- and max- sizes
If you have a box that might contain a variable amount of content, and you always want it to be at least a certain height, you could set the ~min-height~ property on it. The box will always be at least this height, but will then grow taller if there is more content than the box has space for at its minimum height.

This is very useful for dealing with variable amounts of content while avoiding overflow. A common use of ~max-width~ is to cause images to scale down if there is not enough space to display them at their [[The natural or intrinsic size of things][intrinsic]] width while making sure they don't become larger than that width.

*** Viewport units
The viewport — which is the visible area of your page in the browser you are using to view a site — also has a size. In CSS we have units which relate to the size of the viewport — the ~vw~ unit for viewport width, and ~vh~ for viewport height. Using these units you can size something relative to the viewport of the user.

~1vh~ is equal to ~1%~ of the viewport height, and ~1vw~ is equal to ~1%~ of the viewport width. You can use these units to size boxes, but also text.

Sizing things according to the viewport can be useful in your designs. For example, if you want a full-page hero section to show before the rest of your content, making that part of your page ~100vh~ high will push the rest of the content below the viewport, meaning that it will only appear once the document is scrolled.

*** Values and units
**** Lengths
There are two types of lengths used in CSS — relative and absolute. The numeric type you will come across most frequently is ~<length>~. For example, ~10px~ (pixels) or ~30em~.

**** Absolute length units
They are not relative to anything else, and are generally considered to always be the same size. For example, ~10px~ (pixels) ~30cm~ and so on.

**** Relative length units
Relative length units are relative to something else, perhaps the size of the parent element's font, or the size of the viewport. The benefit of using relative units is that with some careful planning you can make it so the size of text or other elements scales relative to everything else on the page. For example, ~30em~ or ~10vw~ and so on.

**** ems and rems
The *em* unit means "my *parent element's font-size*" in the case of typography. The [[li][<li>]] elements inside the [[ul][<ul>]] with a ~class~ of ~ems~ take their sizing from their parent. So each successive level of nesting gets progressively larger, as each has its font size set to ~1.3em~ — 1.3 times its parent's font size.

The *rem* unit means "The *root element's font-size*" (rem stands for "root em"). The ~<li>~ elements inside the ~<ul>~ with a ~class~ of ~rems~ take their sizing from the root element ([[html][<html>]]). This means that each successive level of nesting does not keep getting larger.

#+begin_src css

html { font-size: 16px; }
.ems li { font-size: 1.3em; }
.rems li { font-size: 1.3rem; }

#+end_src

#+begin_src html

<ul class="ems">
  <li>One</li>
  <li>Two</li>
  <li>Three
    <ul>
      <li>Three A</li>
      <li>Three B
        <ul>
          <li>Three B 2</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<ul class="rems">
  <li>One</li>
  <li>Two</li>
  <li>Three
    <ul>
      <li>Three A</li>
      <li>Three B
        <ul>
          <li>Three B 2</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

#+end_src

** The Box model
*** Box model
In CSS we have several types of boxes that generally fit into the categories of block boxes and inline boxes. The type refers to how the box behaves in terms of page flow and in *relation to other boxes* on the page. Boxes have an *inner display type* and an *outer display type*.

The CSS box model as a whole applies to block boxes and defines how the different parts of a box — margin, border, padding, and content — work together to create a box that you can see on a page. Inline boxes use just some of the behavior defined in the box model.

This concept of the outer and inner display type is important as this tells us that a container using a layout method such as [[Flexbox]] (~display: flex~) and [[Grid]] Layout (~display: grid~) is still participating in block and inline layout, due to the outer display type of those methods being ~block~.

*Note*: Changing the value of the [[display property]] can change whether the outer display type of a box is block or inline. This changes the way it displays alongside other elements in the layout. The display property defines how a box and any boxes inside it behave.

*** Parts of a box
**** Box areas
When a user agent (such as your browser) lays out a document, it generates a box for every element. Each box is divided into four areas:  content area, padding area, border area, margin area.

#+begin_src artist

     +-----------------------------------------------------------------+
     |                                                                 |
     |   +---------------------------------------------------------+   |
     |   |                                                         |   |
     |   |   +-------------------------------------------------+   |   |
     |   |   |                                                 |   |   |
     |   |   |   +-----------------------------------------+   |   |   |
     |   |   |   |              content area               |   |   |   |
     |   |   |   +-----------------------------------------+   |   |   |
     |   |   |       padding area                              |   |   |
     |   |   +-------------------------------------------------+   |   |
     |   |        border                                           |   |
     |   +---------------------------------------------------------+   |
     |          margin                                                 |
     +-----------------------------------------------------------------+

#+end_src

**** Content
The area where your content is displayed; size it using properties like ~inline-size~ and ~block-size~ or ~width~ and ~height~.

**** Padding
The padding sits between the border and the content area and is used to push the content away from the border. Unlike margins, you cannot have a negative padding. Any background applied to your element will display behind the padding.

**** Border
The border is drawn between the margin and the padding of a box.

If you are using the *standard box model*, the size of the border is added to the width and height of the content box.

If you are using the *alternative box model* then the size of the border makes the content box smaller as it takes up some of that available width and height of the element box.

**** Margin
The margin is an invisible space around box. It pushes other elements away from the box. Margins can have positive or negative values. Setting a negative margin on one side of your box can cause it to overlap other things on the page. Whether you are using the standard or alternative box model, the margin is always added after the size of the visible box has been calculated.

*Margin collapsing*:
Depending on whether two elements whose margins touch have positive or negative margins, the results will be different:
- two positive margins :: will combine to become one margin. Its size will be equal to the largest individual margin.
- two negative margins :: will collapse and the smallest (furthest from zero) value will be used.
- if one margin is negative :: its value will be subtracted from the total.

*Note*:
- Collapsing margins is only relevant in the vertical direction.
- Margins don't collapse in a container with display set to flex.

*** display property
The display CSS property *sets whether an element is treated as a block or inline box and the layout used for its children*, such as [[Normal flow][flow layout]], [[Grid][grid]] or [[Flex][flex]].

Formally, the ~display~ property sets an element's inner and outer *display types*. The outer type sets an element's participation in flow layout; the inner type sets the layout of children. Some values of ~display~ are fully defined in their own individual specifications; for example the detail of what happens when ~display: flex~ is declared is defined in the CSS Flexible Box Model specification.

In HTML, the default display property value is taken from the HTML specifications or from the browser/user default style sheet. The default value in XML is inline, including SVG elements.

*** Outer display type
(Define como se comporta un elemento con respecto a los elementos a su alrededor (fuera de este))
The display type of an element defines the outer display type; this dictates how the box displays alongside other elements in the same formatting context. If a box has an outer display type of ~block~, then:
- The box will break onto a new line.
- The ~width~ and ~height~ properties are respected.
- Padding, margin and border will cause other elements to be pushed away from the box.
- If ~width~ is not specified, the box will extend in the inline direction to fill the space available in its container. In most cases, the box will become as wide as its container, filling up 100% of the space available.

Some HTML elements, such as [[h1-h6][<h1>]] and [[p][<p>]], use block as their outer display type by default.

If a box has an outer display type of ~inline~, then:
- The box will not break onto a new line.
- The ~width~ and ~height~ properties will not apply.
- Vertical padding, margins, and borders will apply but will not cause other inline boxes to move away from the box.
- Horizontal padding, margins, and borders will apply and will cause other inline boxes to move away from the box.

Some HTML elements, such as [[a][<a>]], [[span][<span>]], ~<em>~ and ~<strong>~ use inline as their outer display type by default.

*** Inner display type
Boxes also have an inner display type, which dictates how elements inside that box are laid out.

Block and inline layout is the default way things behave on the web. By default and without any other instruction, the elements inside a box are also laid out in normal flow and behave as block or inline boxes.

You can change the inner display type for example by setting ~display: flex;~. The element will still use the outer display type ~block~ but this changes the inner display type to ~flex~. Any direct children of this box will become flex items and behave according to the Flexbox specification.

*** Standar and Alternative box model
**** The standard CSS box model
In the standard box model, if you give a box an ~inline-size~ and a ~block-size~ (or ~width~ and a ~height~) attributes, this defines the inline-size and block-size (width and height in horizontal languages) of the content box. Any padding and border is then added to those dimensions to get the total size taken up by the box

#+begin_src artist

     +--------------------------------------------------------------+
     |                                                              |
     |   +-----------------------------------------------------+    |
     |   5                                                     5    |
     |   |   +--------------------------------------------+    |    |
     |10 |25 |           content area    350 x 150        |  25|  10|
     |   |   +--------------------------------------------+    |    |
     |   |       padding area                                  |    |
     |   +--------------------------------+--------------------+    |
     |     margin                         |                         |
     +------------------------------------|-------------------------+
                            410 x 210     |
                                          |
                                        border

#+end_src

#+begin_src css

.box { width: 350px; height: 150px; margin: 10px;
padding: 25px; border: 5px solid black; }

#+end_src

The actual space taken up by the box will be ~410px~ wide (350 + 25 + 25 + 5 + 5) and ~210px~ high (150 + 25 + 25 + 5 + 5).

*Note*: The margin is not counted towards the actual size of the box — sure, it affects the total space that the box will take up on the page, but only the space outside the box. The box's area stops at the border — it does not extend into the margin.

**** The alternative CSS box model
In the alternative box model, any width is the width of the visible box on the page. The content area width is that width minus the width for the padding and border. No need to add up the border and padding to get the real size of the box.

#+begin_src artist

     +--------------------------------------------------------------+
     |                                                              |
     |   +-----------------------------------------------------+    |
     |   5                                                     5    |
     |   |   +--------------------------------------------+    |    |
     |10 |25 |          content area    290 x  90         |  25|  10|
     |   |   +--------------------------------------------+    |    |
     |   |       padding area                                  |    |
     |   +---------------------------------+-------------------+    |
     |     margin                          |                        |
     +-------------------------------------|------------------------+
                            350 x 150      |
                                           |
                                         border

#+end_src

#+begin_src css

/* To turn on the alternative model for an element, */
/* set box-sizing: border-box on it: */
.box { box-sizing: border-box; }

.box { width: 350px; inline-size: 350px; height: 150px; block-size: 150px;
margin: 10px; padding: 25px; border: 5px solid black; }


#+end_src

The actual space taken up by the box will be ~350px~ (290+25+25+5+5) in the inline direction and ~150px~ (90+25+25+5+5) in the block direction.

*Note*: To use the alternative box model for all of your elements, set the ~box-sizing~ property on the [[html][<html>]] element and set all other elements to inherit that value.

#+begin_src css

html {
  box-sizing: border-box;
}
*,
*::before,
*::after {
  box-sizing: inherit;
}

#+end_src

*** Notes
- The margin is what separates some block elements from others.
- The vertical margins of two adjacent block element are not added together, but reduced to the greater of the two. (If the top box has a margin of 4 and an adjacent box below has a margin of 2, the distance separating them is the maxiumum between 2 and 4, that is, 4 not 6 as expected)
- If a box is floating, the text in the other boxes will surround it, always respecting the margins of the floating element.
- For block elements you can specify the width and height of the element.
- For inline elements the width and height of the element is generally the minimum to fit the element.

*** Miscellaneous
**** inline boxes
In inline boxes like ~<span>~ the width and height are ignored. The vertical margin, padding, and border are respected but don't change the relationship of other content to our inline box. The padding and border overlap other words in the paragraph. The horizontal padding, margins, and borders move other content away from the box.

**** inline-block
~display: inline-block~ is a special value of [[display property]], which provides a middle ground between ~inline~ and ~block~. Use it if you do not want an item to break onto a new line, but do want it to respect ~width~ and ~height~ and avoid the overlapping.

An element with ~display: inline-block~ does a subset of the block things:

- The ~width~ and ~height~ properties are respected.
- ~padding~, ~margin~, and ~border~ will cause other elements to be pushed away from the box.

It does not, however, break onto a new line, and will only become larger than its content if you explicitly add ~width~ and ~height~ properties.

*Note*: Where this can be useful is when you want to give a link a larger hit area by adding ~padding~. ~<a>~ is an inline element like ~<span>~; you can use ~display: inline-block~ to allow padding to be set on it, making it easier for a user to click the link.

**** Block and inline layout in normal flow
*Formatting context*
For elements with a *block formatting context*, the spec says:

    "In a block formatting context, boxes are laid out one after the other, vertically, beginning at the top of a containing block. The vertical distance between two sibling boxes is determined by the 'margin' properties. Vertical margins between adjacent block-level boxes in a block formatting context collapse.

    In a block formatting context, each box's left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch)." - 9.4.1

For elements with an *inline formatting context*:

    "In an inline formatting context, boxes are laid out horizontally, one after the other, beginning at the top of a containing block. Horizontal margins, borders, and padding are respected between these boxes. The boxes may be aligned vertically in different ways: their bottoms or tops may be aligned, or the baselines of text within them may be aligned.

The line box size in the block direction (so the height when working in English) is defined by the tallest box inside it.

**** Replaced elements
The *replaced element* can be a block or inline element. What defines it is the fact that its dimensions are unknown in principle. For instance, a ~img~ element. The browser will replace the element with a ~img~ . The ~img~ will have an intrinsic height and width, but in the HTML code those dimensions do not appear, until the element is  not replaced by the corresponding ~img~, the dimensions are not unknown.

Images and video are described as replaced elements. This means that CSS cannot affect the internal layout of these elements — only their position on the page amongst other elements.

Keep in mind that replaced elements, when they become part of a grid or flex layout, have different default behaviors, essentially to avoid them being stretched strangely by the layout.

** Layout
*** Page layout
CSS page layout techniques allow us to take elements contained in a web page and control where they're positioned relative to the following factors: their default position in normal layout flow, the other elements around them, their parent container, and the main viewport/window.

*** Containing block
**** Containing block
The *size* and *position* of an element are often impacted by its containing block (this is why it's so important to learn it). Percentage values that are applied to the ~width~ , ~height~ , ~padding~ , ~margin~ , and offset properties of an absolutely positioned element (i.e., which has its ~position~ set to ~absolute~ or ~fixed~) are computed from the element's containing block.

**** Identifying the containing block
The process for identifying the containing block depends entirely on the value of the element's position property:

- If the ~position~ property is ~static~ , ~relative~ , or ~sticky~ , the containing block is formed by the *edge of the content box* (content area) of the nearest ancestor element that is either a block container (such as an inline-block, block, or list-item element) or establishes a formatting context (such as a table container, flex container, grid container, or the block container itself).
- If the ~position~ property is ~absolute~ , the containing block is formed by the *edge of the padding box* of the nearest ancestor element that has a ~position~ value other than ~static~ ( ~fixed~ , ~absolute~ , ~relative~ , or ~sticky~ ).
- If the ~position~ property is ~fixed~ , the containing block is established by the *viewport* (in the case of continuous media) or the page area (in the case of paged media).
- If the ~position~ property is ~absolute~ or ~fixed~, the containing block may also be formed by the *edge of the padding box* of the nearest ancestor element that has the following:
  - A ~transform~ or ~perspective~ value other than /none/
  - A ~will-change~ value of /transform/ or /perspective/
  - A ~filter~ value other than /none/ or a /will-change/ value of /filter/ (only works on Firefox).
  - A ~contain~ value of /paint/ (e.g. /contain: paint;/)
  - A ~backdrop-filter~ other than /none/ (e.g. /backdrop-filter: blur(10px);/)

*Note*: The containing block in which the root element ( ~<html>~ ) resides is a rectangle called the initial containing block. It has the dimensions of the viewport (for continuous media) or the page area (for paged media).

**** Calculating percentage values from the containing block
When certain properties are given a percentage value, the computed value depends on the element's containing block. The properties that work this way are *box model properties* and *offset properties*:

- The ~height~ , ~top~ , and ~bottom~ properties compute percentage values from the ~height~ of the containing block.
- The ~width~ , ~left~ , ~right~ , ~padding~ , and ~margin~ properties compute percentage values from the ~width~ of the containing block.

*Note*: A *block container* (such as an inline-block, block, or list-item element) either contains only inline-level boxes participating in an inline formatting context, or only block-level boxes participating in a block formatting context. An element is a block container only if it contains block-level or inline-level boxes.

**** Examples position property block container
***** static position, ancestor block container
In the example below, the paragraph is statically positioned, so its containing block is ~<section>~ because it's the nearest ancestor that is a block container (because of ~display: block~).

#+begin_src html

<section>
  <p>This is a paragraph!</p>
</section>

#+end_src

#+begin_src css

body {
  background: beige;
}

section {
  display: block;
  width: 400px;/* content area width is 400px but the box width is 480px */
  height: 160px;/* content area height is 160px but the box height is 240px */
  padding: 30px;
  border: 10px solid black;
  margin: 20px;
  background: lightgray;
}

p {
   width: 50%; /* == 400px * .5 = 200px */
   height: 25%; /* == 160px * .25 = 40px */
   margin: 5%; /* == 400px * .05 = 20px */
   padding: 5%; /* == 400px * .05 = 20px */
   background: cyan;
   }

#+end_src

***** static position, ancestor block container (<body>)
In the example below, the paragraph's containing block is the ~<body>~ element, because ~<section>~ is not a block container (because of ~display: inline~) and doesn't establish a formatting context.

#+begin_src html

<section>
  <p>This is a paragraph!</p>
</section>

#+end_src

#+begin_src css

body {
  background: beige;
}

section {
  display: inline;
  background: lightgray;
}

p {
  width: 50%; /* == half the body's width */
  height: 200px; /* Note: a percentage would be 0 */
  background: cyan;
}

#+end_src

***** absolute position, ancestor block container (ancestor absolute)
In the example below,the paragraph's containing block is ~<section>~ because the latter's ~position~ is ~absolute~. The paragraph's percentage values are affected by the ~padding~ of its containing block, though if the containing block's ~box-sizing~ value were ~border-box~ this would not be the case.

#+begin_src html

<section>
  <p>This is a paragraph!</p>
</section>

#+end_src

#+begin_src css

body {
  background: beige;
}

section {
  position: absolute;
  left: 60px;
  top: 30px;
  width: 400px;
  height: 160px;
  padding: 30px 20px;
  background: lightgray;
}

p {
  position: absolute;
  width: 50%; /* == (400px + 20px + 20px) * .5 = 220px */
  height: 25%; /* == (160px + 30px + 30px) * .25 = 55px */
  margin: 5%; /* == (400px + 20px + 20px) * .05 = 22px */
  padding: 5%; /* == (400px + 20px + 20px) * .05 = 22px */
  background: cyan;
}

#+end_src

***** fixed position, ancestor block cointainer (viewport)
In the example below,the paragraph's ~position~ is ~fixed~, so its containing block is the initial containing block (on screens, the viewport). Thus, the paragraph's dimensions change based on the size of the browser window.

#+begin_src html

<section>
  <p>This is a paragraph!</p>
</section>

#+end_src

#+begin_src css

body {
  background: beige;
}

section {
  width: 400px;
  height: 480px;
  margin: 30px;
  padding: 15px;
  background: lightgray;
}

p {
  position: fixed;
  width: 50%; /* == (50vw - (width of vertical scrollbar)) */
  height: 50%; /* == (50vh - (height of horizontal scrollbar)) */
  margin: 5%; /* == (5vw - (width of vertical scrollbar)) */
  padding: 5%; /* == (5vw - (width of vertical scrollbar)) */
  background: cyan;
}

#+end_src

***** absolute position, ancestor with a transform property
In the example below, the paragraph's position is absolute, so its containing block is ~<section>~, which is the nearest ancestor with a transform property that isn't none.

#+begin_src html

<section>
  <p>This is a paragraph!</p>
</section>

#+end_src

#+begin_src css

body {
  background: beige;
}

section {
  transform: rotate(0deg);
  width: 400px;
  height: 160px;
  background: lightgray;
}

p {
  position: absolute;
  left: 80px;
  top: 30px;
  width: 50%; /* == 200px */
  height: 25%; /* == 40px */
  margin: 5%; /* == 20px */
  padding: 5%; /* == 20px */
  background: cyan;
}

#+end_src

*** Normal flow
**** Definition
Normal flow is how the browser lays out HTML pages by default when you do nothing to control page layout. The HTML is displayed in the exact order in which it appears in the source code, with elements stacked on top of one another.

The position property allows you to precisely control the placement of boxes inside other boxes. ~static~ positioning is the default in normal flow.

Standard values such as ~block~, ~inline~ or ~inline-block~ can change how elements behave in normal flow. We also have entire layout methods that are enabled via specific display values, for example, CSS [[Grid]] and [[Flexbox]], which alter how child elements are laid out inside their parents.

**** How elements are structured individually
By default, a *block level element's* content fills the available inline space of the parent element containing it and the element grows along the block dimension to accommodate its content. The size of *inline elements* is just the size of their content. You can't set width or height on inline elements — they just sit inside the content of block level elements — except for images. Unlike other inline elements, images can be resized without changing their ~display~ property. If you want to control the size of an inline element in this manner, you need to set it to behave like a block level element.

**** How about the structured when the elements interact with one another
The normal layout flow is the system by which elements are placed inside the browser's viewport. By default, block-level elements are laid out in the *block flow direction*, which is based on the parent's writing mode (initial: horizontal-tb). Each element will appear on a new line below the last one, with each one separated by whatever margin that's been specified. In English, for example, (or any other horizontal, top to bottom writing mode) block-level elements are laid out vertically.

Inline elements behave differently. They don't appear on new lines; instead, they all sit on the same line along with any adjacent (or wrapped) text content as long as there is space for them to do so inside the width of the parent block level element. If there isn't space, then the overflowing content will move down to a new line.

*Note*: The direction in which block element contents are laid out is described as the Block Direction. The Block Direction runs vertically in a language such as English, which has a horizontal writing mode. The corresponding Inline Direction is the direction in which inline contents (such as a sentence) would run.

*** Flexbox
**** Flex brief
Flexbox is the short name for the Flexible Box Layout CSS module, designed to make it easy for us to lay things out in one dimension — either as a row or as a column. Items flex (*expand*) to fill additional space or shrink to fit into smaller spaces. To use flexbox, you apply ~display: flex~ to the parent element of the elements you want to lay out; all its direct children then become flex items.

*When to use Flexbox*:
- Vertically centering a block of content inside its parent.
- Making all the children of a container take up an equal amount of the available width/height, regardless of how much width/height is available.
- Making all columns in a multiple-column layout adopt the same height even if they contain a different amount of content.

*Graph Flex Model*:
- The *main axis* is the axis running in the direction the flex items are laid out in (for example, as a row across the page, or a column down the page.) The start and end of this axis are called the *main start* and *main end*.
- The *cross axis* is the axis running perpendicular to the direction the flex items are laid out in. The start and end of this axis are called the *cross start* and *cross end*.
- The parent element that has ~display: flex~ set on it is called the *flex container*.
- The items laid out as flexible boxes inside the flex container are called *flex items*.

#+begin_src artist

     +-------------------------------------------------------------+
     |flex container     ^                   ^                     |
     |                   | cross start       |  cross axis         |
     |                   |                   |                     |
     |<--------------------------------------+-------------------->|
     |                    main axis          |                     |
     | +--------------+   +---------------+  |  +----------------+ |
     | |              |   |               |  |  |             ^  | |
     | | felx item    |   | flex item     |  |  | flex item   |  | |
     | |              |   |               |  |  |             |  | |
     | |              |   |               |  |  |             |  | |
     | |              |   |               |  |  |             |  | |
     | |              |   |<------------->|  |  |   cross size|  | |
     | |              |   |  main size    |  |  |             v  | |
     | +--------------+   +---------------+  |  +----------------+ |
     |                   cross end           |                     |
     |<---main start     |                   |    main end   ----->|
     |                   v                   v                     |
     +-------------------------------------------------------------+

#+end_src

**** display: flex
The HTML markup below gives us a containing element with a class of ~wrapper~, inside of which are three ~<div>~ elements. By default these would display as block elements, that is, below one another in our English language document.

However, if we add ~display: flex~ to the parent (it acting like a block-element in terms of how it interacts with the rest of the page, but its children are laid out as flex items) the three items now arrange themselves into columns (se organizan en filas pero cada una en si se ve como columna). This is due to them becoming flex items and being affected by some initial values that flexbox sets on the flex container. They are displayed in a row because the property ~flex-direction~ of the parent element has an initial value of ~row~.

They all appear to stretch in height because the property ~align-items~ of their parent element has an initial value of ~stretch~. This means that the items stretch to the height of the flex container, which in this case is defined by the tallest item. The items all line up at the start of the container, leaving any extra space at the end of the row.

#+begin_src artist

   +-------------------------------+
   | +---------------------------+ |
   | |  1                        | |
   | +---------------------------+ |
   | +---------------------------+ |
   | |  2                        | |
   | +---------------------------+ |
   | +---------------------------+ |
   | |  3                        | |
   | +---------------------------+ |
   +-------------------------------+

   +-------------------------------+
   | +---+  +---+  +---+           |
   | | 1 |  | 2 |  | 3 |           |
   | +---+  +---+  +---+           |
   +-------------------------------+

#+end_src

#+begin_src css

.wrapper {
  display: flex;
}

#+end_src

#+begin_src html

<div class="wrapper">
  <div class="box1">One</div>
  <div class="box2">Two</div>
  <div class="box3">Three</div>
</div>

#+end_src

**** flex: properties
In addition to properties that can be applied to a *flex container*, there are also properties that can be applied to flex items. These properties, among other things, can change the way that *items flex*, enabling them to expand or contract according to available space.

As a simple example, we can add the ~flex~ property to all of our child items, and give it a value of ~1~. *This will cause all of the items to grow and fill the container, rather than leaving space at the end*. If there is more space then the items will become wider; if there is less space they will become narrower. In addition, if you add another element to the markup, the other items will all become smaller to make space for it; the items all together continue taking up all the space.

#+begin_src artist

   +-------------------------------+
   | +---------------------------+ |
   | |  1                        | |
   | +---------------------------+ |
   | +---------------------------+ |
   | |  2                        | |
   | +---------------------------+ |
   | +---------------------------+ |
   | |  3                        | |
   | +---------------------------+ |
   +-------------------------------+

   +-------------------------------+
   | +-------+ +-------+ +-------+ |
   | |   1   | |   2   | |    3  | |
   | +-------+ +-------+ +-------+ |
   +-------------------------------+

#+end_src

#+begin_src css

.wrapper {
  display: flex;
}

.wrapper > div {
  flex: 1;
}

#+end_src

#+begin_src html

<div class="wrapper">
  <div class="box1">One</div>
  <div class="box2">Two</div>
  <div class="box3">Three</div>
</div>

#+end_src

**** flex-direction
It specifies which direction the [[Flex brief][main axis]] runs (which direction the flexbox children are laid out in). By default this is set to ~row~, which causes them to be laid out in a row in the direction your browser's default language works in (left to right, in the case of an English browser).

Other valus are ~column~ , ~row-reverse~ , ~column-reverse~ .

**** flex-wrap
Flex items are laid out in multiple rows in the flex container. The ~flex-wrap~ property is set to 'wrap' in the flex container to displays the flex items in a new row if the flex items in the previous row overflow outside the flexbox container. All the items are stretched to be the same height, as tall as the flex item with the most content.

#+begin_src artist

   +-------------------------------+
   |                               |
   | +-----+  +-----+  +-----+  +-----+
   | |  1  |  |  2  |  |  3  |  |  4  |
   | +-----+  +-----+  +-----+  +-----+
   |                               |
   +-------------------------------+

   +-------------------------------+
   |                               |
   | +-----+  +-----+  +-----+     |
   | |  1  |  |  2  |  |  3  |     |
   | +-----+  +-----+  +-----+     |
   | +-----+                       |
   | |  4  |                       |
   | +-----+                       |
   |                               |
   +-------------------------------+

#+end_src

#+begin_src css

html { font-family: sans-serif; }

body {
    margin: 0;
}

header {
    background: purple;
    height: 100px;
}

h1 {
    text-align: center;
    color: white;
    line-height: 100px;
    margin: 0;
}

article {
    padding: 10px;
    margin: 10px;
    background: aqua;
}

/* Add your flexbox CSS below here */
section {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
}

article {
    flex: 200px;
    /* means that each will be at least 200px wide */
}

#+end_src

#+begin_src html

<header>
  <h1>Sample flexbox example</h1>
</header>

<section>
  <article>
    <h2>First article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>
  </article>

  <article>
    <h2>Second article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>
  </article>

  <article>
    <h2>Third article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>

    <p>Cray food truck brunch, XOXO +1 keffiyeh pickled chambray
    waistcoat ennui. Organic small batch paleo 8-bit. Intelligentsia
    umami wayfarers pickled, asymmetrical kombucha letterpress kitsch
    leggings cold-pressed squid chartreuse put a bird on it. Listicle
    pickled man bun cornhole heirloom art party.</p>
  </article>

  <article>
    <h2>Fourth article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>
  </article>

  <article>
    <h2>Fifth article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>
  </article>

  <article>
    <h2>Sixth article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>

    <p>Cray food truck brunch, XOXO +1 keffiyeh pickled chambray
    waistcoat ennui. Organic small batch paleo 8-bit. Intelligentsia
    umami wayfarers pickled, asymmetrical kombucha letterpress kitsch
    leggings cold-pressed squid chartreuse put a bird on it. Listicle
    pickled man bun cornhole heirloom art party.</p>
  </article>

  <article>
    <h2>Seventh article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>
  </article>

  <article>
    <h2>Eighth article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>
  </article>

  <article>
    <h2>Ninth article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>

    <p>Cray food truck brunch, XOXO +1 keffiyeh pickled chambray
    waistcoat ennui. Organic small batch paleo 8-bit. Intelligentsia
    umami wayfarers pickled, asymmetrical kombucha letterpress kitsch
    leggings cold-pressed squid chartreuse put a bird on it. Listicle
    pickled man bun cornhole heirloom art party.</p>
  </article>

  <article>
    <h2>Tenth article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>
  </article>

  <article>
    <h2>Eleventh article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>
  </article>

  <article>
    <h2>Twelfth article</h2>

    <p>Tacos actually microdosing, pour-over semiotics banjo
    chicharrones retro fanny pack portland everyday carry vinyl
    typewriter. Tacos PBR&B pork belly, everyday carry ennui pickled
    sriracha normcore hashtag polaroid single-origin coffee
    cold-pressed. PBR&B tattooed trust fund twee, leggings salvia
    iPhone photo booth health goth gastropub hammock.</p>

    <p>Cray food truck brunch, XOXO +1 keffiyeh pickled chambray
    waistcoat ennui. Organic small batch paleo 8-bit. Intelligentsia
    umami wayfarers pickled, asymmetrical kombucha letterpress kitsch
    leggings cold-pressed squid chartreuse put a bird on it. Listicle
    pickled man bun cornhole heirloom art party.</p>
  </article>
</section>

#+end_src

**** flex-flow shorthand
It is a shorthand for ~flex-direction~ and ~flex-wrap~ .

#+begin_src css

/* can be replaced */
flex-direction: row;
flex-wrap: wrap;

/* with */
flex-flow: row wrap;

#+end_src

**** Flexible sizing of flex items
***** Flexible sizing
The proportion value in the example dictates how much available space along the [[Flex brief][main axis]] each flex item will take up compared to other flex items. In this case a value of 1, which means they'll all take up an equal amount of the spare space left after properties like padding and margin have been set. This value is proportionally shared among the flex items.

Now adding the next rule, then the third ~<article>~ takes up twice as much of the available width as the other two. There are now four proportion units available in total (since 1 + 1 + 2 = 4). The first two flex items have one unit each, so they each take 1/4 of the available space. The third one has two units, so it takes up 2/4 of the available space (or one-half).

#+begin_src css

/* First take the following rule: */
article {
  flex: 1;
}
/* Next rule */
article:nth-of-type(3) {
  flex: 2;
}

#+end_src

#+begin_src html

<section>
  <article>
    <h2>First article</h2>

    <p>Tacos actually microdosing,....</p>
  </article>

  <article>
    <h2>Second article</h2>

    <p>Tacos actually microdosing...</p>
  </article>

  <article>
    <h2>Third article</h2>

    <p>Tacos actually microdosing,...</p>

    <p>Cray food truc....</p>
  </article>
</section>

#+end_src

***** Specify minimum value
You can also specify a minimum size value within the flex value. This basically states, "Each flex item will first be given 200px of the available space. After that, the rest of the available space will be shared according to the proportion units.

#+begin_src css

article {
  flex: 1 200px;
  /* flex: 1 auto; */
  /* intersting efect */
}

article:nth-of-type(3) {
  flex: 2 200px;
}

#+end_src

#+begin_src html

<section>
  <article>
    <h2>First article</h2>

    <p>Tacos actually microdosing,....</p>
  </article>

  <article>
    <h2>Second article</h2>

    <p>Tacos actually microdosing...</p>
  </article>

  <article>
    <h2>Third article</h2>

    <p>Tacos actually microdosing,...</p>

    <p>Cray food truc....</p>
  </article>
</section>

#+end_src

**** Horizontal and vertical alignment
***** align-items vertical
~align-items~ controls where the flex items sit on the [[Flex brief][cross axis]].

- By default, the value is ~stretch~, which stretches all flex items to fill the parent in the direction of the cross axis. If the parent doesn't have a fixed height in the cross axis direction, then all flex items will become as tall as the tallest flex item.
- The ~center~ value causes the items to maintain their intrinsic dimensions, but be centered along the cross axis.
- You can also have values like ~flex-start~ and ~flex-end~, which will align all items at the start and end of the cross axis respectively.

#+begin_src artist

   +---------------------------------+
   | +-----+ +-----+ +-----+         |
   | |  1  | |  2  | |  3  |         |
   | +-----+ +-----+ +-----+         |
   |                                 |
   |                                 |
   |                                 |
   |                                 |
   +---------------------------------+

   +---------------------------------+
   |                                 |
   |                                 |
   |+-----++-----++-----+            |
   ||  1  ||  2  ||  3  |            |
   |+-----++-----++-----+            |
   |                                 |
   |                                 |
   +---------------------------------+

#+end_src

#+begin_src css

html {
   font-family: sans-serif;
   }

body {
   width: 70%;
   max-width: 960px;
   margin: 20px auto;
   }

button {
   font-size: 18px;
   line-height: 1.5;
   width: 15%;
   }

div {
   height: 100px;
   border: 1px solid black;
   display: flex;
   align-items: center;
   }

/* You can override the align-items behavior for individual flex items by */
/* applying the align-self property to them. */
button:first-child {
  align-self: flex-end;
}

#+end_src

#+begin_src html

<div>
   <button>Smile</button>
   <button>Laugh</button>
   <button>Wink</button>
   <button>Shrug</button>
   <button>Blush</button>
</div>

#+end_src

***** justify-content horizontal
~justify-content~ controls where the flex items sit on the [[Flex brief][main axis]].

- The default value is ~flex-start~, which makes all the items sit at the start of the main axis.
- You can use ~flex-end~ to make them sit at the end.
- ~center~ will make the flex items sit in the center of the main axis.
- ~space-around~ distributes all the items evenly along the main axis with a bit of space left at either end.
- ~space-between~ is very similar to ~space-around~ except that it doesn't leave any space at either end.

The ~justify-items~ property is ignored in flexbox layouts.

#+begin_src artist

   +---------------------------------+
   | +-----++-----++-----+           |
   | |  1  ||  2  ||  3  |           |
   | +-----++-----++-----+           |
   |                                 |
   |                                 |
   |                                 |
   |                                 |
   +---------------------------------+

   +---------------------------------+
   |   +-----+   +-----+   +-----+   |
   |   |  1  |   |  2  |   |  3  |   |
   |   +-----+   +-----+   +-----+   |
   |                                 |
   |                                 |
   |                                 |
   |                                 |
   +---------------------------------+

#+end_src

#+begin_src css

html {
   font-family: sans-serif;
   }

body {
   width: 70%;
   max-width: 960px;
   margin: 20px auto;
   }

button {
   font-size: 18px;
   line-height: 1.5;
   width: 15%;
   }

div {
   height: 100px;
   border: 1px solid black;
   display: flex;
   align-items: center;
   justify-content: space-around;
   }

/* You can override the align-items behavior for individual flex items by */
/* applying the align-self property to them. */
button:first-child {
  align-self: flex-end;
}

#+end_src

#+begin_src html

<div>
   <button>Smile</button>
   <button>Laugh</button>
   <button>Wink</button>
   <button>Shrug</button>
   <button>Blush</button>
</div>

#+end_src

**** Ordering flex items
Flexbox also has a feature for changing the layout order of flex items without affecting the source order. This is another thing that is impossible to do with traditional layout methods.

#+begin_src css

button:first-child {
  order: 1;
}

#+end_src

- By default, all flex items have an ~order~ value of 0.
- Flex items with higher specified order values will appear later in the display order than items with lower order values.
- Flex items with the same order value will appear in their source order.

You can set negative order values to make items appear earlier than items whose value is 0.

*** Grid
**** Grid brief
A grid is a collection of horizontal and vertical lines creating a pattern against which we can line up our design elements. They help us to create layouts in which our elements *won't jump around or change width as we move from page to page*, providing greater consistency on our websites.

A grid will typically have columns, rows, and then gaps between each row and column. The gaps are commonly referred to as gutters.

Lines can be addressed using their line number. In a left-to-right language such as English, column line 1 will be on the left of the grid, row line 1 on the top. Lines numbers respect the writing mode of the document and so in a right-to-left language for example, column line 1 will be on the right of the grid. The image below shows the line numbers of the grid, assuming the language is left-to-right.

#+begin_src artist

  COLUMNS                         LINES
   +-------------------------------1--------------------------------+
   |                   |                       |                    |
   |                   |                       |                    |
   |       One         |          Two          |       Three        |
   |                   |                       |                    |
   |                   |                       |                    |
   1-------------------2-----------2-----------3--------------------4
   |                   |                       |                    |
   |                   |                       |                    |
   |      Four         |         Five          |        Six         |
   |                   |                       |                    |
   |                   |                       |                    |
   +-------------------------------3--------------------------------+

#+end_src

**** Defining a grid
***** Flexible grid
To define a grid we use ~display: grid~ property. As with Flexbox, this enables Grid Layout; all of the direct children of the container become grid items.

Declaring ~display: grid~ gives you a one column grid, so your items will continue to display one below the other as they do in normal flow. To see something that looks more grid-like, we'll need to add some columns to the grid with ~grid-template-columns~ property.

#+begin_src artist

   +-------------------------------+
   | +---------------------------+ |
   | |  1                        | |
   | +---------------------------+ |
   | +---------------------------+ |
   | |  2                        | |
   | +---------------------------+ |
   | +---------------------------+ |
   | |  3                        | |
   | +---------------------------+ |
   | +---------------------------+ |
   | |  4                        | |
   | +---------------------------+ |
   |                               |
   +-------------------------------+

   +-------------------------------+
   | +-------++-------++-------+   |
   | |   1   ||   2   ||   3   |   |
   | +-------++-------++-------+   |
   | +-------+                     |
   | |   4   |                     |
   | +-------+                     |
   +-------------------------------+

#+end_src

#+begin_src css

body {
  width: 90%;
  max-width: 900px;
  margin: 2em auto;
  font: .9em/1.2 Arial, Helvetica, sans-serif;
  }

.container > div {
  border-radius: 5px;
  padding: 10px;
  background-color: rgb(207,232,220);
  border: 2px solid rgb(79,185,227);
  }

.container {
  display: grid;
 /*grid-template-columns: repeat(3, 200px)*/
  grid-template-columns: 200px 200px 200px;
}

#+end_src

#+begin_src html

<h1>Simple grid example</h1>

   <div class="container">
      <div>One</div>
      <div>Two</div>
      <div>Three</div>
      <div>Four</div>
      <div>Five</div>
      <div>Six</div>
      <div>Seven</div>
   </div>

#+end_src

***** Flexible grids with the fr unit
In addition to creating grids using lengths and percentages, we can use ~fr~. The ~fr~ unit represents one fraction of the *available* space in the grid container to flexibly size grid rows and columns.

You can mix ~fr~ units with fixed length units. In this case, the space needed for the fixed tracks is used up first before the remaining space is distributed to the other tracks.

*Note*: The ~fr~ unit distributes *available* space, not all space. Therefore, if one of your tracks has something large inside it, there will be less free space to share.

#+begin_src artist

   +-------------------------------+
   | +---------------------------+ |
   | |  1                        | |
   | +---------------------------+ |
   | +---------------------------+ |
   | |  2                        | |
   | +---------------------------+ |
   | +---------------------------+ |
   | |  3                        | |
   | +---------------------------+ |
   | +---------------------------+ |
   | |  4                        | |
   | +---------------------------+ |
   |                               |
   +-------------------------------+

   +-------------------------------+
   | +-----------++------++------+ |
   | |     1     ||  2   ||  3   | |
   | +-----------++------++------+ |
   | +-----------+                 |
   | |     4     |                 |
   | +-----------+                 |
   +-------------------------------+

#+end_src

#+begin_src css

body {
  width: 90%;
  max-width: 900px;
  margin: 2em auto;
  font: .9em/1.2 Arial, Helvetica, sans-serif;
  }

.container > div {
  border-radius: 5px;
  padding: 10px;
  background-color: rgb(207,232,220);
  border: 2px solid rgb(79,185,227);
  }

.container {
  display: grid;
  grid-template-columns: 2fr 1fr 1fr;
}

#+end_src

#+begin_src html

<h1>Simple grid example</h1>

   <div class="container">
      <div>One</div>
      <div>Two</div>
      <div>Three</div>
      <div>Four</div>
   </div>

#+end_src

**** Gaps between tracks
To create gaps between tracks, we use the properties:

- ~column-gap~ for gaps between columns
- ~row-gap~ for gaps between rows
- ~gap~ as a shorthand for both

*Note*: These gaps can be any length unit or percentage, but not an ~fr~ unit.

#+begin_src artist

   +-------------------------------+
   | +-----++-----++-----+         |
   | |  1  ||  2  ||  3  |         |
   | +-----++-----++-----+         |
   | +-----+                       |
   | |  4  |                       |
   | +-----+                       |
   +-------------------------------+

   +-------------------------------+
   | +-----+   +-----+   +-----+   |
   | |  1  |   |  2  |   |  3  |   |
   | +-----+   +-----+   +-----+   |
   | +-----+                       |
   | |  4  |                       |
   | +-----+                       |
   +-------------------------------+

#+end_src

#+begin_src css

.container {
  display: grid;
  grid-template-columns: 2fr 1fr 1fr;
  gap: 20px;
}

/* Note: The gap properties (column-gap, row-gap and gap) used to be */
/* prefixed by grid-. The spec has changed but the prefixed versions will */
/* be maintained as an alias. To be on the safe side and make your code */
/* more bulletproof, you can add both properties: */
.container {
  display: grid;
  grid-template-columns: 2fr 1fr 1fr;
  grid-gap: 20px;
  gap: 20px;
}

#+end_src

#+begin_src html

<h1>Simple grid example</h1>

   <div class="container">
      <div>One</div>
      <div>Two</div>
      <div>Three</div>
      <div>Four</div>
   </div>

#+end_src

**** The implicit and explicit grid
The difference between explicit and the implicit grid:
- explicit grid :: created using ~grid-template-columns~ or ~grid-template-rows~.
- implicit grid :: extends the defined explicit grid when content is placed outside of that grid, such as into our rows by drawing additional grid lines.

By default, tracks created in the implicit grid are ~auto~ sized, which in general means that they're large enough to accommodate their content. If you wish to give implicit grid tracks a size, you can use the ~grid-auto-rows~ and ~grid-auto-columns~ properties. If you ~add grid-auto-rows~ with a value of ~100px~ to your CSS, you'll see that those created rows are now 100 pixels tall.

#+begin_src artist

   +-------------------------------+
   | +-------++-------++-------+   |
   | |   1   ||   2   ||   3   |   |
   | +-------++-------++-------+   |
   | +-------+                     |
   | |   4   |                     |
   | +-------+                     |
   +-------------------------------+

   +-------------------------------+
   | +-------++-------++-------+   |
   | |       ||       ||       |   |
   | |   1   ||   2   ||   3   |   |
   | |       ||       ||       |   |
   | +-------++-------++-------+   |
   | +-------+                     |
   | |       |                     |
   | |   4   |                     |
   | |       |                     |
   | +-------+                     |
   +-------------------------------+

#+end_src

#+begin_src css

.container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);  /*grid-template-columns: 1fr 1fr 1fr;*/
  grid-auto-rows: 100px;
  gap: 20px;
}

#+end_src

#+begin_src html

<h1>Simple grid example</h1>

   <div class="container">
      <div>One</div>
      <div>Two</div>
      <div>Three</div>
      <div>Four</div>
   </div>

#+end_src

**** The minmax() function
If we set 100-pixel tall tracks ~grid-auto-rows: 100px;~ won't be very useful if we add content into those tracks that is taller than 100 pixels, in which case it would cause an overflow. It might be better to have tracks that are at least 100 pixels tall and can still expand if more content becomes added.

The ~minmax()~ function lets us set a minimum and maximum size for a track, for example, ~minmax(100px, auto)~ .The minimum size is 100 pixels, but the maximum is ~auto~, which will expand to accommodate more content. Try changing ~grid-auto-rows~ to use a minmax value.

If you add extra content, you'll see that the track expands to allow it to fit. Note that the expansion happens right along the row.

#+begin_src css

.container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-auto-rows: minmax(100px, auto);
  gap: 20px;
}

#+end_src

#+begin_src html

<h1>Simple grid example</h1>

   <div class="container">
      <div>One</div>
      <div>Two</div>
      <div>Three</div>
      <div>Four</div>
   </div>

#+end_src

**** As many columns as will fit
Sometimes it's helpful to be able to ask grid to create as many columns as will fit into the container. We do this by setting the value of ~grid-template-columns~ using the ~repeat()~ function, but instead of passing in a number, pass in the keyword ~auto-fill~. For the second parameter of the function we use ~minmax()~ with a minimum value equal to the minimum track size that we would like to have and a maximum of ~1fr~.

This works because grid is creating as many 200-pixel columns as will fit into the container, then sharing whatever space is leftover among all the columns. The maximum is ~1fr~ which, as we already know, distributes space evenly between tracks.

#+begin_src css

.container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  grid-auto-rows: minmax(100px, auto);
  gap: 20px;
}

#+end_src

#+begin_src html

<h1>Simple grid example</h1>

   <div class="container">
      <div>One</div>
      <div>Two</div>
      <div>Three</div>
      <div>Four</div>
   </div>

#+end_src

**** Line-based placement
Creating a grid to placing things on the grid. Grid always has [[Grid brief][lines]] — these are numbered beginning with 1 and relate to the writing mode of the document.

We can arrange things in accordance with these lines by specifying the start and end line. We do this using the following properties: ~grid-column-start~ , ~grid-column-end~ , ~grid-row-start~ , ~grid-row-end~ .

These properties can all have a line number as their value. You can also use the shorthand properties: ~grid-column~ , ~grid-row~ .These let you specify the start and end lines at once, separated by a forward slash (~/~).

*Note*: You can also use the value -1 to target the end column or row line, then count inwards from the end using negative values. Note also that lines count always from the edges of the explicit grid, not the implicit grid.

#+begin_src css

body {
    width: 90%;
    max-width: 900px;
    margin: 2em auto;
    font: 0.9em/1.2 Arial, Helvetica, sans-serif;
}

.container {
    display: grid;
    grid-template-columns: 1fr 3fr;
    gap: 20px;
}

header,
footer {
    border-radius: 5px;
    padding: 10px;
    background-color: rgb(207, 232, 220);
    border: 2px solid rgb(79, 185, 227);
}

aside {
    border-right: 1px solid #999;
}

/* Line-based placement */

header {
    grid-column: 1 / 3; /* 1 column to 3 columbn */
    grid-row: 1; /* 1 row */
}

article {
    grid-column: 2;
    grid-row: 2;
}

aside {
    grid-column: 1;
    grid-row: 2;
}

footer {
    grid-column: 1 / 3;
    grid-row: 3;
}

#+end_src

#+begin_src html

<div class="container">
  <header>This is my lovely blog</header>
  <article>
    <h1>My article</h1>
    <p>
      Duis felis orci, pulvinar id metus ut, rutrum luctus orci. Cras
      porttitor imperdiet nunc, at ultricies tellus laoreet sit amet. Sed
      auctor cursus massa at porta. Integer ligula ipsum, tristique sit amet
      orci vel, viverra egestas ligula. Curabitur vehicula tellus neque, ac
      ornare ex malesuada et. In vitae convallis lacus. Aliquam erat
      volutpat. Suspendisse ac imperdiet turpis. Aenean finibus sollicitudin
      eros pharetra congue. Duis ornare egestas augue ut luctus. Proin
      blandit quam nec lacus varius commodo et a urna. Ut id ornare felis,
      eget fermentum sapien.
    </p>

    <p>
      Nam vulputate diam nec tempor bibendum. Donec luctus augue eget
      malesuada ultrices. Phasellus turpis est, posuere sit amet dapibus ut,
      facilisis sed est. Nam id risus quis ante semper consectetur eget
      aliquam lorem. Vivamus tristique elit dolor, sed pretium metus
      suscipit vel. Mauris ultricies lectus sed lobortis finibus. Vivamus eu
      urna eget velit cursus viverra quis vestibulum sem. Aliquam tincidunt
      eget purus in interdum. Cum sociis natoque penatibus et magnis dis
      parturient montes, nascetur ridiculus mus.
    </p>
  </article>
  <aside>
    <h2>Other things</h2>
    <p>
      Nam vulputate diam nec tempor bibendum. Donec luctus augue eget
      malesuada ultrices. Phasellus turpis est, posuere sit amet dapibus ut,
      facilisis sed est.
    </p>
  </aside>
  <footer>Contact me@mysite.com</footer>
</div>

#+end_src

**** Positioning with grid-template-areas
An alternative way to arrange items on your grid is to use the ~grid-template-areas~ property and give the various elements of your design a name.

The rules for ~grid-template-areas~ are as follows:

- You need to have every cell of the grid filled.
- To span across two cells, repeat the name.
- To leave a cell empty, use a ~.~ (period).
- Areas must be rectangular — for example, you can't have an L-shaped area.
- Areas can't be repeated in different locations.

#+begin_src css

body {
    width: 90%;
    max-width: 900px;
    margin: 2em auto;
    font: 0.9em/1.2 Arial, Helvetica, sans-serif;
}

.container {
    display: grid;
    grid-template-columns: 1fr 3fr;
    gap: 20px;
}

header,
footer {
    border-radius: 5px;
    padding: 10px;
    background-color: rgb(207, 232, 220);
    border: 2px solid rgb(79, 185, 227);
}

aside {
    border-right: 1px solid #999;
}

/* grid-template-areas */
.container {
  display: grid;
  grid-template-areas:
    "header header"
    "sidebar content"
    "footer footer";
  grid-template-columns: 1fr 3fr;
  gap: 20px;
}

header {
  grid-area: header;
}

article {
  grid-area: content;
}

aside {
  grid-area: sidebar;
}

footer {
  grid-area: footer;
}

#+end_src

#+begin_src html

<div class="container">
  <header>This is my lovely blog</header>
  <article>
    <h1>My article</h1>
    <p>
      Duis felis orci, pulvinar id metus ut, rutrum luctus orci. Cras
      porttitor imperdiet nunc, at ultricies tellus laoreet sit amet. Sed
      auctor cursus massa at porta. Integer ligula ipsum, tristique sit amet
      orci vel, viverra egestas ligula. Curabitur vehicula tellus neque, ac
      ornare ex malesuada et. In vitae convallis lacus. Aliquam erat
      volutpat. Suspendisse ac imperdiet turpis. Aenean finibus sollicitudin
      eros pharetra congue. Duis ornare egestas augue ut luctus. Proin
      blandit quam nec lacus varius commodo et a urna. Ut id ornare felis,
      eget fermentum sapien.
    </p>

    <p>
      Nam vulputate diam nec tempor bibendum. Donec luctus augue eget
      malesuada ultrices. Phasellus turpis est, posuere sit amet dapibus ut,
      facilisis sed est. Nam id risus quis ante semper consectetur eget
      aliquam lorem. Vivamus tristique elit dolor, sed pretium metus
      suscipit vel. Mauris ultricies lectus sed lobortis finibus. Vivamus eu
      urna eget velit cursus viverra quis vestibulum sem. Aliquam tincidunt
      eget purus in interdum. Cum sociis natoque penatibus et magnis dis
      parturient montes, nascetur ridiculus mus.
    </p>
  </article>
  <aside>
    <h2>Other things</h2>
    <p>
      Nam vulputate diam nec tempor bibendum. Donec luctus augue eget
      malesuada ultrices. Phasellus turpis est, posuere sit amet dapibus ut,
      facilisis sed est.
    </p>
  </aside>
  <footer>Contact me@mysite.com</footer>
</div>

#+end_src

**** Basic Example
CSS Grid Layout excels at dividing a page into major regions or defining the relationship in terms of size, position, and layer, between parts of a control built from HTML primitives.

Like tables, grid layout enables an author to align elements into columns and rows. However, many more layouts are either possible or easier with CSS grid than they were with tables.

#+begin_src artist

  +-----------------------------------------------------------------+
  | +-----------------+----------------------+--------------------+ |
  | | 1               | 2                    |                    | |
  | |                 |                      |                    | |
  | |                 |                      |                    | |
  | |                 |                      |                    | |
  | +-----------------+----------------------+                    | |
  | +---------------+ |                                           | |
  | | 3             | |                                           | |
  | |               | |                                           | |
  | |               | |                                           | |
  | |               | +-------------------------------------------+ |
  | |               |                        +--------------------+ |
  | |               |                        | 4                  | |
  | |               |                        |                    | |
  | |               |                        |                    | |
  | |               |                        |                    | |
  | |               |                        |                    | |
  | |               |                        +--------------------+ |
  | |               | +-------------------+  +--------------------+ |
  | |               | | 5                 |  | 6                  | |
  | |               | |                   |  |                    | |
  | |               | |                   |  |                    | |
  | |               | |                   |  |                    | |
  | |               | |                   |  |                    | |
  | +---------------+ +-------------------+  +--------------------+ |
  +-----------------------------------------------------------------+

#+end_src

#+begin_src css

.wrapper {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 10px;
  grid-auto-rows: minmax(100px, auto);
}
/* Line-based placement */
.one {
  grid-column: 1 / 3; /* 1 column to 3 column */
  grid-row: 1; /* 1 row */
}
.two {
  grid-column: 2 / 4;
  grid-row: 1 / 3;
}
.three {
  grid-column: 1;
  grid-row: 2 / 5;
}
.four {
  grid-column: 3;
  grid-row: 3;
}
.five {
  grid-column: 2;
  grid-row: 4;
}
.six {
  grid-column: 3;
  grid-row: 4;
}

#+end_src

#+begin_src html

<div class="wrapper">
  <div class="one">One</div>
  <div class="two">Two</div>
  <div class="three">Three</div>
  <div class="four">Four</div>
  <div class="five">Five</div>
  <div class="six">Six</div>
</div>

#+end_src

*** Positioning
**** Definition
Positioning allows you to *move an element from where it would otherwise be placed in normal flow over to another location*. Positioning isn't a method for creating the main layouts of a page; it's more about managing and fine-tuning the position of specific items on a page.

There are five possible values of the ~position~ property. If an item is positioned in any way other than ~static~, then the further properties ~top~, ~bottom~, ~left~, and ~right~ are used to specify offsets and positions. The element having position static is not affected by the ~top~, ~bottom~ , ~left~ or ~right~ properties.

To make a specific type of positioning active on an element, we use the ~position~ property.

**** Static
Is the default that every element gets. It just means "put the element into its normal position in the document layout flow".

#+begin_src css

body {
  width: 500px;
  margin: 0 auto;
  position: relative;
 }

p {
  background: aqua;
  border: 3px solid blue;
  padding: 10px;
  margin: 10px;
 }

span {
  background: red;
  border: 1px solid black;
}

.positioned {
  position: static;
  background: yellow;
}

#+end_src

#+begin_src html

<h1>Positioning</h1>

<p>I am a basic block level element. My adjacent block level elements
sit on new lines below me.</p>

<p class="positioned">Now I'm absolutely positioned relative to
the <code>&lt;body&gt;</code> element, not
the <code>&lt;html&gt;</code> element!</p>

<p>We are separated by our margins. Because of margin collapsing, we
are separated by the width of one of our margins, not both.</p>

<p>inline elements <span>like this one</span> and <span>this
one</span> sit on the same line as one another, and adjacent text
nodes, if there is space on the same line. Overflowing inline
elements <span>wrap onto a new line if possible — like this one
containing text</span>, or just go on to a new line if not, much like
this image will do: <img src="long.jpg" alt="a wide but short section
of a photo of several fabrics"></p>

#+end_src

**** Relative
The item is placed in the normal flow, and then shifted or offset from that position. Subsequent flow items are laid out as if the item had not been moved.

This is very similar to static positioning, allows you to modify an element's position on the page, moving it relative to its position in normal flow, as well as making it overlap other elements on the page. This means you could achieve a task such as moving an icon down a bit so it lines up with a text label.

~top~ , ~bottom~ , ~left~ , and ~right~ are used alongside position to specify exactly where to move the positioned element to.

*Note*: You need to think of it as if there's an invisible force that pushes the specified side of the positioned box, moving it in the opposite direction. So, for example, if you specify ~top: 30px;~, it's as if a force will push the top of the box, causing it to move downwards by 30px.

#+begin_src css

body {
  width: 500px;
  margin: 0 auto;
  position: relative;
 }

p {
  background: aqua;
  border: 3px solid blue;
  padding: 10px;
  margin: 10px;
 }

span {
  background: red;
  border: 1px solid black;
}

.positioned {
  position: relative;
  top: 30px;
  left: 30px;
  background: yellow;
}

#+end_src

#+begin_src html

<h1>Positioning</h1>

<p>I am a basic block level element. My adjacent block level elements
sit on new lines below me.</p>

<p class="positioned">Now I'm absolutely positioned relative to
the <code>&lt;body&gt;</code> element, not
the <code>&lt;html&gt;</code> element!</p>

<p>We are separated by our margins. Because of margin collapsing, we
are separated by the width of one of our margins, not both.</p>

<p>inline elements <span>like this one</span> and <span>this
one</span> sit on the same line as one another, and adjacent text
nodes, if there is space on the same line. Overflowing inline
elements <span>wrap onto a new line if possible — like this one
containing text</span>, or just go on to a new line if not, much like
this image will do: <img src="long.jpg" alt="a wide but short section
of a photo of several fabrics"></p>

#+end_src

**** Absolute
***** Absolute
Moves an element completely out of the page's normal layout flow, like it's sitting on its own separate layer. From there, you can fix it to a position relative to the edges of its closest positioned ancestor (which becomes ~<html>~ if no other ancestors are positioned). The element is positioned in relation to its nearest non-static ancestor.

An absolutely positioned element is very useful: it means that *we can create isolated UI features that don't interfere with the layout of other elements on the page*. For example, popup information boxes, control menus, rollover panels, UI features that can be dragged and dropped anywhere on the page, and so on.

~top~ , ~bottom~ , ~left~ , and ~right~ behave in a different way with absolute positioning. Rather than positioning the element based on its relative position within the normal document flow, they specify the distance the element should be from each of the containing element's sides. So in this case, we are saying that the absolutely positioned element should sit 30px from the top of the "containing element" and 30px from the left. (In this case, the "containing element" is the initial containing block)

*Note*: You can use ~top~ , ~bottom~ , ~left~ , and ~right~ to resize elements if you need to. Try setting ~top: 0; bottom: 0; left: 0; right: 0;~ and ~margin: 0;~ on your positioned elements. The results is that the element will take up the full window.

*Note*: Margins still affect positioned elements. Margin collapsing doesn't, however.

#+begin_src css

body {
  width: 500px;
  margin: 0 auto;
  position: relative;
 }

p {
  background: aqua;
  border: 3px solid blue;
  padding: 10px;
  margin: 10px;
 }

span {
  background: red;
  border: 1px solid black;
}

.positioned {
  position: absolute;
  top: 30px;
  left: 30px;
  background: yellow;
}

#+end_src

#+begin_src html

<h1>Positioning</h1>

<p>I am a basic block level element. My adjacent block level elements
sit on new lines below me.</p>

<p class="positioned">Now I'm absolutely positioned relative to
the <code>&lt;body&gt;</code> element, not
the <code>&lt;html&gt;</code> element!</p>

<p>We are separated by our margins. Because of margin collapsing, we
are separated by the width of one of our margins, not both.</p>

<p>inline elements <span>like this one</span> and <span>this
one</span> sit on the same line as one another, and adjacent text
nodes, if there is space on the same line. Overflowing inline
elements <span>wrap onto a new line if possible — like this one
containing text</span>, or just go on to a new line if not, much like
this image will do: <img src="long.jpg" alt="a wide but short section
of a photo of several fabrics"></p>

#+end_src

***** Positioning contexts
Which element is the "containing element" of an absolutely positioned element? This is very much dependent on the position property of the ancestors of the positioned element.

If no ancestor elements have their position property explicitly defined, then by default all ancestor elements will have a static position. The result of this is the absolutely positioned element will be contained in the *initial containing block*. The initial containing block has the dimensions of the viewport and is also the block that contains the ~<html>~ element. In other words, the absolutely positioned element will be displayed outside of the ~<html>~ element and be positioned relative to the initial viewport.

The positioned element is nested inside the ~<body>~ in the HTML source, but in the final layout it's 30px away from the top and the left edges of the page. We can change the positioning context, that is, which element the absolutely positioned element is positioned relative to. This is done by setting positioning on one of the element's ancestors: to one of the elements it's nested inside of (you can't position it relative to an element it's not nested inside of).

#+begin_src css

body {
  width: 500px;
  margin: 0 auto;
  position: relative;
}

p {
  background: aqua;
  border: 3px solid blue;
  padding: 10px;
  margin: 10px;
}

span {
  background: red;
  border: 1px solid black;
}

.positioned {
  position: absolute;
  background: yellow;
  top: 10px;
  left: 30px;
}

#+end_src

#+begin_src html

<h1>Positioning</h1>

<p>I am a basic block level element. My adjacent block level elements
sit on new lines below me.</p>

<p class="positioned">Now I'm absolutely positioned relative to
the <code>&lt;body&gt;</code> element, not
the <code>&lt;html&gt;</code> element!</p>

<p>We are separated by our margins. Because of margin collapsing, we
are separated by the width of one of our margins, not both.</p>

<p>inline elements <span>like this one</span> and <span>this
one</span> sit on the same line as one another, and adjacent text
nodes, if there is space on the same line. Overflowing inline
elements <span>wrap onto a new line if possible — like this one
containing text</span>, or just go on to a new line if not, much like
this image will do: <img src="long.jpg" alt="a wide but short section
of a photo of several fabrics"></p>

#+end_src

***** Introducing z-index
You can change the stacking order by using the ~z-index~ property. "z-index" is a reference to the z-axis.

For languages that run left to right, (0,0) is at the top left of the page (or element), and the x- and y-axes run across to the right and down the page.

~z-index~ values affect where positioned elements sit on that axis; positive values move them higher up the stack, negative values move them lower down the stack. By default, positioned elements all have a ~z-index~ of ~auto~ , which is effectively 0.

~z-index~ only accepts unitless index values. Higher values will go above lower values and it's up to you what values you use. Using values of 2 or 3 would give the same effect as values of 300 or 40000.

#+begin_src css

p:nth-of-type(1) {
  position: absolute;
  background: lime;
  top: 10px;
  right: 30px;
  z-index: 1;
}

#+end_src

#+begin_src html

<h1>Positioning</h1>

<p>I am a basic block level element. My adjacent block level elements
sit on new lines below me.</p>

<p class="positioned">Now I'm absolutely positioned relative to
the <code>&lt;body&gt;</code> element, not
the <code>&lt;html&gt;</code> element!</p>

<p>We are separated by our margins. Because of margin collapsing, we
are separated by the width of one of our margins, not both.</p>

<p>inline elements <span>like this one</span> and <span>this
one</span> sit on the same line as one another, and adjacent text
nodes, if there is space on the same line. Overflowing inline
elements <span>wrap onto a new line if possible — like this one
containing text</span>, or just go on to a new line if not, much like
this image will do: <img src="long.jpg" alt="a wide but short section
of a photo of several fabrics"></p>

#+end_src

**** Fixed
The item is absolutely positioned in a fixed position on the screen even as the rest of the document is scrolled.

This works in exactly the same way as absolute positioning, with one key difference: whereas absolute positioning fixes an element in place relative to its nearest positioned ancestor (the initial containing block if there isn't one), *fixed positioning* usually fixes an element in place relative to the visible portion of the *viewport*. (An exception to this occurs if one of the element's ancestors is a fixed containing block because its transform property has a value other than none.)

This means that *you can create useful UI items that are fixed in place, like persistent navigation menus that are always visible*.

In the example below some content is initially clipped under the heading. This is because the positioned heading no longer appears in the document flow, so the rest of the content moves up to the top. We could improve this by moving the paragraphs all down a bit. We can do this by setting some top margin on the first paragraph. Apply the last selector to see this.

#+begin_src css

body {
  width: 500px;
  height: 1400px;
  margin: 0 auto;
}

h1 {
  position: fixed;
  top: 0;
  width: 500px;
  margin-top: 0;
  background: silver;
  padding: 10px;
}

p {
   background: aqua;
   border: 3px solid blue;
   padding: 10px;
   margin: 10px;
   }

span {
    background: red;
    border: 1px solid black;
}

/* Uncomment this to see all the paragraphs in the proper way */
/* p:nth-of-type(1) { */
/*   margin-top: 60px; */
/* } */


#+end_src

#+begin_src html

<h1>Positioning</h1>

<p>I am a basic block level element. My adjacent block level elements
sit on new lines below me.</p>

<p class="positioned">Now I'm absolutely positioned relative to
the <code>&lt;body&gt;</code> element, not
the <code>&lt;html&gt;</code> element!</p>

<p>We are separated by our margins. Because of margin collapsing, we
are separated by the width of one of our margins, not both.</p>

<p>inline elements <span>like this one</span> and <span>this
one</span> sit on the same line as one another, and adjacent text
nodes, if there is space on the same line. Overflowing inline
elements <span>wrap onto a new line if possible — like this one
containing text</span>, or just go on to a new line if not, much like
this image will do: <img src="long.jpg" alt="a wide but short section
of a photo of several fabrics"></p>

#+end_src

**** Sticky
***** Sticky
This is basically a hybrid between relative and fixed position. It allows a positioned element to act like it's relatively positioned until it's scrolled to a certain threshold (e.g., 10px from the top of the viewport), after which it becomes fixed.

Sticky positioning can be used, for example, to cause a navigation bar to scroll with the page until a certain point and then stick to the top of the page.

#+begin_src css

body {
  width: 500px;
  height: 1400px;
  margin: 0 auto;
}

h1 {
  position: fixed;
  top: 0;
  width: 500px;
  margin-top: 0;
  background: silver;
  padding: 10px;
}

p {
   background: aqua;
   border: 3px solid blue;
   padding: 10px;
   margin: 10px;
   }

span {
    background: red;
    border: 1px solid black;
}

p:nth-of-type(1) {
  margin-top: 60px;
}

.positioned {
  position: sticky;
  top: 30px;
  left: 30px;
}

#+end_src

#+begin_src html

<h1>Positioning</h1>

<p>I am a basic block level element. My adjacent block level elements
sit on new lines below me.</p>

<p class="positioned">Now I'm absolutely positioned relative to
the <code>&lt;body&gt;</code> element, not
the <code>&lt;html&gt;</code> element!</p>

<p>We are separated by our margins. Because of margin collapsing, we
are separated by the width of one of our margins, not both.</p>

<p>inline elements <span>like this one</span> and <span>this
one</span> sit on the same line as one another, and adjacent text
nodes, if there is space on the same line. Overflowing inline
elements <span>wrap onto a new line if possible — like this one
containing text</span>, or just go on to a new line if not, much like
this image will do: <img src="long.jpg" alt="a wide but short section
of a photo of several fabrics"></p>

#+end_src

***** Scrolling index
An interesting and common use of ~position: sticky~ is to create a scrolling index page where different headings stick to the top of the page as they reach it. The markup for such an example might look like so:

#+begin_src html

<h1>Sticky positioning</h1>

<dl>
  <dt>A</dt>
  <dd>Apple</dd>
  <dd>Ant</dd>
  <dd>Altimeter</dd>
  <dd>Airplane</dd>
  <dt>B</dt>
  <dd>Bird</dd>
  <dd>Buzzard</dd>
  <dd>Bee</dd>
  <dd>Banana</dd>
  <dd>Beanstalk</dd>
  <dt>C</dt>
  <dd>Calculator</dd>
  <dd>Cane</dd>
  <dd>Camera</dd>
  <dd>Camel</dd>
  <dt>D</dt>
  <dd>Duck</dd>
  <dd>Dime</dd>
  <dd>Dipstick</dd>
  <dd>Drone</dd>
  <dt>E</dt>
  <dd>Egg</dd>
  <dd>Elephant</dd>
  <dd>Egret</dd>
</dl>

#+end_src

In normal flow the ~<dt>~ elements will scroll with the content. When we add ~position: sticky~ to the ~<dt>~ element, along with a ~top~ value of 0, supporting browsers will stick the headings to the top of the viewport as they reach that position. Each subsequent header will then replace the previous one as it scrolls up to that position.

#+begin_src css

dt {
  background-color: black;
  color: white;
  padding: 10px;
  position: sticky;
  top: 0;
  left: 0;
  margin: 1em 0;
}

#+end_src

*** Floats
The ~float~ property was introduced to allow web developers to implement layouts involving an *image floating inside a column of text*, with the text wrapping around the left or right of it. The kind of thing you might get in a newspaper layout. But web developers quickly realized that *you can float anything, not just images*, so the use of float broadened.

Absolutely positioned or fixed items cannot be floated. Other elements normally flow around floated items, unless they are prevented from doing so by their ~clear~ property.

Floating an element changes the behavior of that element and the block level elements that follow it in normal flow. The floated element is moved to the left or right and removed from normal flow, and the surrounding content floats around it.

The ~float~ property has four possible values:

- ~left~ —  floats to the left of the line that it would have appeared in; other items may flow around its right side.
- ~right~ — floats to the right of the line that it would have appeared in; other items may flow around its left side.
- ~none~ — Specifies no floating at all. This is the default value.
- ~inherit~ — Specifies that the value of the float property should be inherited from the element's parent element.
- ~clear~ — forces the element to appear underneath ('clear') floated elements to the left (~clear:left~), right (~clear:right~) or both sides (~clear:both~).

*Note*: While we can add a margin to the float to push the text away, we can't add a margin to the text to move it away from the float. This is because a floated element is taken out of normal flow and the boxes of the following items actually run behind the float. To see this you can add a class od ~special~ to the first paragraph of text.

#+begin_src css

.special { background-color: rgb(79, 185, 227); padding: 10px; color: #fff; }

#+end_src

In the example below, we float a ~<div>~ left and give it a ~margin~ on the right to push the surrounding text away from it. This gives us the effect of text wrapped around the boxed element, and is most of what you need to know about floats as used in modern web design.

#+begin_src css

.box {
  float: left;
  width: 150px;
  height: 150px;
  margin: 30px;
  border-radius: 5px;
  background-color: rgb(207, 232, 220);
  padding: 1em;
}

#+end_src

#+begin_src html

<h1>Simple float example</h1>

<div class="box">Float</div>

<p>
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla luctus aliquam
  dolor, eu lacinia lorem placerat vulputate. Duis felis orci, pulvinar id metus
  ut, rutrum luctus orci. Cras porttitor imperdiet nunc, at ultricies tellus
  laoreet sit amet. Sed auctor cursus massa at porta. Integer ligula ipsum,
  tristique sit amet orci vel, viverra egestas ligula. Curabitur vehicula tellus
  neque, ac ornare ex malesuada et. In vitae convallis lacus. Aliquam erat
  volutpat. Suspendisse ac imperdiet turpis. Aenean finibus sollicitudin eros
  pharetra congue. Duis ornare egestas augue ut luctus. Proin blandit quam nec
  lacus varius commodo et a urna. Ut id ornare felis, eget fermentum sapien.
</p>

#+end_src

*** Multi-column layout
The Multi-column layout properties can cause the content of a block to layout in columns, as you might see in a newspaper.

With multicol, you specify a ~column-count~ to indicate the maximum number of columns you want your content to be split into. The browser then works out the size of these, a size that will change according to the screen size.

#+begin_src css

.container {
  column-count: 3;
}

#+end_src

If you instead specify a ~column-width~ , you are specifying a minimum width. The browser will create as many columns of that width as will comfortably fit into the container, then share out the remaining space between all the columns. Therefore the number of columns will change according to how much space there is.

You can use the ~columns~ shorthand to provide a maximum number of columns and a minimum column width.

#+begin_src css

.container {
  column-width: 10em;
}

#+end_src

*** Fallback methods
**** Definition
CSS specifications contain information that explains what the browser does when *two layout methods are applied to the same item*. This means that there is a definition for what happens if a floated item, for example, is also a Grid Item using CSS Grid Layout.

**** Float and clear
The float and clear properties cease to affect the layout if floated or cleared items become flex or grid items.

**** display: inline-block
If an item has ~display: inline-block~ set but then becomes a flex or grid item, the inline-block behavior is ignored.

**** display: table
If an item has ~display: table~, ~display: table-cell~, etc., set but then becomes a flex or grid item, the display value is ignored.

**** Multiple-column Layout
For certain layouts you could use multi-col as a fallback, if your container has any of the ~column-*~ properties defined on it and then becomes a grid container, the multicol behavior will not happen.

**** Flexbox as a Fallback for Grid
Flexbox has greater browser support than Grid due to being supported by IE10 and 11. If you make a flex container into a grid container, any ~flex~ property applied to the children will be ignored.

**** Feature queries
If we add a feature query to the example, we can use it to set the widths of our items back to ~auto~ if we know that we have grid support.

Support for feature queries is very good across modern browsers. However, you should note that browsers that do not support CSS Grid also tend not to support feature queries. This means that an approach as detailed below will work for those browsers. What we are doing is writing our old CSS first, outside of any feature query. Browsers that do not support Grid, and do not support the feature query will use that layout information they can understand and completely ignore everything else. The browsers that support the feature query also support CSS Grid and so will run the grid code and the code inside the feature query.

#+begin_src css

 * {
  box-sizing: border-box;
}

.wrapper {
  background-color: rgb(79, 185, 227);
  padding: 10px;
  max-width: 400px;
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
}

.item {
  float: left;
  border-radius: 5px;
  background-color: rgb(207, 232, 220);
  padding: 1em;
  width: 33.333%;
}

@supports (display: grid) {
  .item {
    width: auto;
  }
}

#+end_src

#+begin_src html

<div class="wrapper">
  <div class="item">Item One</div>
  <div class="item">Item Two</div>
  <div class="item">Item Three</div>
</div>

#+end_src

*** Artist size and scrolling

#+begin_src artist

     -----
       |
       |    ┌-----------------------------------------------------┐  --------
       |    |                                                     |      |
 ---------  |   ┌---------------------------------------------┐   |      |
     |      |   |                                         | ▲ |   |      |
     |      |   |     padding                             |   |   |      |
     |      |   |                                         |   |   |      |
clientHeigh |   |          ┌-----------------------┐      | ═ |   |      |
     |      |   |          |     content area      |      |   |   | offsetHeigh
     |      |   |          |                       |      |   |   |      |
     |      |   |          |                       |      | ▼ |   |      |
 ---------  |   |-----------------------------------------+---|   |      |
       |    |   |◀                    ║║║                ▶|   |   |      |
       |    |   └---------------------------------------------┘   |      |
       |    |  border                                             |      |
       |    └-----------------------------------------------------┘  --------
       |        |----------------clientWidth--------------|
       |    |----------------------offsetWidth--------------------|
       |        |---------------------------scrollWidth-----------------------|
   scrollHeight            ┆                       ┆
       |                   ┆                       ┆
       |                   ┆                       ┆
       |                   ┆     content area      ┆
     -----                 └-----------------------┘

#+end_src

#+begin_src artist

            ┌-----------------------------------------------------┐   --------
            | Firefox                                       _ x □ |      |
            ┌-----------------------------------------------------┐      |
            |                                                     |      |
  -------   |   ┌---------------------------------------------┐   |      |
     |      |   |                                         | ▲ |   |      |
     |      |   |     padding                             |   |   |      |
     |      |   |                                         |   |   |      |
     |      |   |          ┌-----------------------┐      | ═ |   |  outerHeigh
 innerHeigh |   |          |     content area      |      |   |   |      |
     |      |   |          |                       |      |   |   |      |
     |      |   |          |                       |      | ▼ |   |      |
     |      |   |-----------------------------------------+---|   |      |
     |      |   |◀                    ║║║                ▶|   |   |      |
  -------   |   └---------------------------------------------┘   |      |
       |    |  border                                             |      |
       |    └-----------------------------------------------------┘  --------
       |        |----------------clientWidth--------------|
       |    |----------------------offsetWidth--------------------|
       |        |---------------------------scrollWidth-----------------------|
   scrollHeight            ┆                       ┆
       |                   ┆                       ┆
       |                   ┆                       ┆
       |                   ┆     content area      ┆
     -----                 └-----------------------┘

#+end_src

** Styling text
*** Web fonts
**** Web fonts brief
CSS allows you to specify font files, available on the web, to be downloaded along with your website as it's accessed.

Here are some important things to bear in mind about web fonts:
- All major browsers support WOFF/WOFF2 (Web Open Font Format versions 1 and 2). Even older browsers such as IE9 (released in 2011) support the WOFF format.
- WOFF2 supports the entirety of the TrueType and OpenType specifications, including variable fonts, chromatic fonts, and font collections.
- If you need to work with legacy browsers, you should provide EOT (Embedded Open Type), TTF (TrueType Font), and SVG web fonts for download.

*Note*: WOFF is basically TTF with metadata and compression, TrueType fonts provide highest quality display on computer screens and printers without any dependency on resolution whereas WOFF is an open format used for delivering webpage fonts on the fly. It is saved as a compressed container and supports TrueType (. TTF) and OpenType (. OTF) fonts and also supports font licensing information.

First of all, you have a ~@font-face~ ruleset at the start of the CSS, which specifies the font file(s) to download:

#+begin_src css

@font-face {
  font-family: "myFont";
  src: url("myFont.woff2");
}

/* Below this you use the font family name specified inside @font-face to */
/* apply your custom font to anything you like, as normal: */
html {
  font-family: "myFont", "Bitstream Vera Serif", serif;
}

#+end_src

**** Finding fonts and generating required code
***** Finding fonts
Let's find some fonts! Go to [[https://www.fontsquirrel.com/][Font Squirrel]] and choose two fonts: a nice interesting font for the headings, and a slightly less flashy and more readable font for the paragraphs. When you've found a font, press the download button and save the file inside the same directory as the HTML and CSS files you saved earlier. It doesn't matter whether they are TTF (True Type Fonts) or OTF (Open Type Fonts).

Now you'll need to generate the required code (and font formats).

- Go to the Fontsquirrel [[https://www.fontsquirrel.com/tools/webfont-generator][Webfont Generator]] .
- Upload your two font files using the Upload Fonts button.
- Check the checkbox labeled =Yes, the fonts I'm uploading are legally eligible for web embedding.=
- Click Download your kit.

After the generator has finished processing, you should get a ZIP file to download. Save it in the same directory as your HTML and CSS.

If you need to support legacy browsers, select the "Expert" mode in the Fontsquirrel Webfont Generator, select SVG, EOT, and TTF formats before downloading your kit.

Web services for font generation typically limit file sizes. In such a case, consider using tools such as: =sfnt2woff-zopfli= for converting ttf to woff, =fontforge= for converting from ttf to svg, =batik= ttf2svf for converting from ttf to svg, =woff2= for converting from ttf to woff2.

***** Implementing the code in page
At this point, unzip the webfont kit you just generated. Inside the unzipped directory you'll see some useful items:

- Two versions of each font: the ~.woff~, ~.woff2~ files.
- A demo HTML file for each font — load these in your browser to see what the font will look like in different usage contexts.
- A ~stylesheet.css~ file, which contains the generated ~@font-face~ code you'll need.

To implement these fonts in your demo, follow these steps:
- Open up the ~stylesheet.css~ file and copy the two ~@font-face~ rulesets into your ~web-font-start.css~ file — you need to put them at the very top, before any of your CSS, as the fonts need to be imported before you can use them on your site.
- Each of the ~url()~ functions points to a font file that we want to import into our CSS. We need to make sure the paths to the files are correct, so add ~fonts/~ to the start of each path (adjust as necessary).
- Now you can use these fonts in your font stacks, just like any web safe or default system font. For example:

#+begin_src css

/* font imports, generated by fontsquirrel.com */
@font-face {
    font-family: 'ciclefina';
    src: url('fonts/cicle_fina-webfont.woff2') format('woff2'),
         url('fonts/cicle_fina-webfont.woff') format('woff');
/* These lines specify the paths to the font files to be imported into */
/* your CSS (the url part), and the format of each font file (the format */
/* part). The latter part in each case is optional, but is useful to */
/* declare because it allows browsers to more quickly determine which */
/* font they can use. Multiple declarations can be listed, separated by */
/* commas. Because the browser will search through them according to the */
/* rules of the cascade, it is best to state your preferred formats, like */
/* WOFF2, at the beginning. */
    font-weight: normal;
    font-style: normal;
/* If you are importing multiple weights of the same font, you can */
/* specify what their weight/style is and then use different values of */
/* font-weight/font-style to choose between them, rather than having to */
/* call all the different members of the font family different names. */
}

@font-face {
  font-family: 'zantrokeregular';
  src: url('fonts/zantroke-webfont.woff2') format('woff2'),
       url('fonts/zantroke-webfont.woff') format('woff');
  font-weight: normal;
  font-style: normal;
}

/* General setup */
html {
  font-size: 10px;
  margin: 0;
  font-family: sans-serif;
}

body {
  width: 80%;
  max-width: 800px;
  margin: 0 auto;
}

/* Typography */

h1 {
  font-size: 3.2rem;
}

h2 {
  font-size: 2.4rem;
}

h1,h2 {
  font-family: 'zantrokeregular', serif;
  letter-spacing: 0.2rem;
}

p {
  font-size: 1.6rem;
  line-height: 1.6;
  letter-spacing: 0.1rem;
  word-spacing: 0.3rem;
  font-family: 'ciclefina', sans-serif;
}

#+end_src

**** Using an online font service
Online font services generally store and serve fonts for you so you don't have to worry about writing the ~@font-face code~.

Put the line of HTML code generated from Google Fonts above the existing ~<link>~ element, so that the font is imported before you try to use it in your CSS. You then need to copy the CSS declarations listed into your CSS as appropriate, to apply the custom fonts to your HTML.

#+begin_src html

<!DOCTYPE html>
<html lang="en-us">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width">
    <title>Web font example</title>
    <link href='https://fonts.googleapis.com/css?family=Lobster|Raleway'
          rel='stylesheet' type='text/css'>
    <link href="google-font.css" rel="stylesheet" type="text/css">
  </head>
  <body>
    <h1>Hipster ipsum is the best</h1>
  </body>
</html>

#+end_src

#+begin_src css

/* General setup */
html {
  font-size: 10px;
  margin: 0;
  font-family: sans-serif;
}

body {
  width: 80%;
  max-width: 800px;
  margin: 0 auto;
}

/* Typography */

h1 {
  font-size: 4rem;
}

h2 {
  font-size: 3rem;
}

h1, h2 {
  font-family: 'Lobster', cursive;
}

p {
  font-size: 1.4rem;
  line-height: 1.6;
  word-spacing: 0.6rem;
  letter-spacing: 0.1rem;
  font-family: 'Raleway', sans-serif;
}

#+end_src

*** Font styles
**** Definition
Properties that affect a text's font, e.g., which font gets applied, its size, and whether it's bold, italic, etc.

**** font-family
***** Web safe fonts
You can use the font stack to specify preferred fonts, followed by web-safe alternatives, followed by the default system font. However, this increases your workload because of the testing required to make sure that your designs work with each font.

- Arial
- Courier New
- Georgia
- Times New Roman
- Trebuchet MS
- Verdana

***** Default fonts
CSS defines five generic names for fonts: serif, sans-serif, monospace, cursive, and fantasy.

**** font-size
- ~ems~: ~1 em~ is equal to the font size set on the parent element of the current element we are styling (more specifically, the width of a capital letter M contained inside the parent element).
- The standard font-size of which is set to ~16px~ across browsers. Any paragraph (or another element that doesn't have a different size set by the browser) inside the root element will have a final size of ~16px~. Other elements may have different default sizes. For example, an ~h1~ element has a size of ~2em~ set by default, so it will have a final size of ~32px~.
-  It is best to use ~rem~ where you can to keep things simple, and avoid setting the ~font-size~ of container elements where possible.

*** Text layout style
**** Definition
Properties that affect the spacing and other layout features of the text, allowing manipulation of, for example, the space between lines and letters, and how the text is aligned within the content box.

**** text-align
**** line-height
**** letter-spacing, word-spacing
*** Stylink links
**** order
The order is important because link styles build on one another. For example, the styles in the first rule will apply to all the subsequent ones. When a link is activated, it's usually also hovered over. If you put these in the wrong order, and you're changing the same properties in each ruleset, things won't work as you expect. To remember the order, you could try using a mnemonic like LoVe Fears HAte.

#+begin_src css

a {
}

a:link {
}

a:visited {
}

a:focus {
}

a:hover {
}

a:active {
}

#+end_src

**** links as buttons
A website navigation menu can be marked up as a set of links, and this can be styled to look like a set of control buttons or tabs that provide the user with access to other parts of the site. Let's explore how.

#+begin_src html

<nav class="container">
  <a href="#">Home</a>
  <a href="#">Pizza</a>
  <a href="#">Music</a>
  <a href="#">Wombats</a>
  <a href="#">Finland</a>
</nav>

#+end_src

#+begin_src css

body,
html {
  margin: 0;
  font-family: sans-serif;
}

.container {
  display: flex;
  gap: 0.625%;
}

a {
  flex: 1;
  text-decoration: none;
  outline: none;
  text-align: center;
  line-height: 3;
  color: black;
}

a:link,
a:visited,
a:focus {
  background: palegoldenrod;
  color: black;
}

a:hover {
  background: orange;
}

a:active {
  background: darkred;
  color: white;
}

#+end_src

*** Example website text styling
**** Fonts
- First of all, download a couple of free-to-use fonts or search a link in google font.
- Use a suitable service to generate bulletproof ~@font-face~ code for these two fonts.
- Apply your body font to the whole page, and your heading font to your headings.

**** General text styling
- Give the page a site-wide ~font-size~.
- Give your headings and other element types appropriate font-sizes defined using a suitable relative unit.
- Give your body text a suitable ~line-height~.
- Center your top level heading on the page.
- Give your headings a little bit of ~letter-spacing~ to make them not too squashed, and allow the letters to breathe a bit.
- Give your body text some ~letter-spacing~ and ~word-spacing~, as appropriate.
- Give the first paragraph after each heading in the ~<section>~ a little bit of text-indentation, say ~20px~.

**** Links
- Give the link, visited, focus, and hover states some colors that go with the color of the horizontal bars at the top and bottom of the page.
- Remove the default focus outline from ALL the links on the page.
- Give the active state a noticeably different styling so it stands out nicely, but make it still fit in with the overall page design.

**** Lists
- Make sure the spacing of your lists and list items works well with the styling of the overall page. Each list item should have the same ~line-height~ as a paragraph line, and each list should have the same spacing at its top and bottom as you have between paragraphs.
- Give your list items a nice bullet appropriate for the design of the page. It is up to you whether you choose a custom bullet image or something else.

** Inheritance Cascade Specificity
*** Inheritance
**** Definition
Inheritance is a key feature in CSS; it relies on the ancestor-descendant relationship to operate. Inheritance is the mechanism by which properties are applied not only to a specified element but also to its descendants. Inheritance relies on the document tree, which is the hierarchy of XHTML elements in a page based on nesting. Descendant elements may inherit CSS property values from any ancestor element enclosing them. *In general, descendant elements inherit text-related properties, but their box-related properties are not inherited*.

- properties that can be inherited are :: color, font, letter spacing, line-height, list-style, text-align, text-indent, text-transform, visibility, white-space, and word-spacing.
- properties that cannot be inherited are :: background, border, display, float and clear, height, and width, margin, min- and max-height and -width, outline, overflow, padding, position, text-decoration, vertical-align, and z-index.

**** Controlling inheritance
- inherit :: sets the property value applied to a selected element to be the same as that of its parent element. Effectively, this "turns on inheritance".
- initial :: sets the property value applied to a selected element to the initial value of that property.
- revert :: resets the property value applied to a selected element to the browser's default styling rather than the defaults applied to that property. This value acts like unset in many cases.
- revert-layer :: resets the property value applied to a selected element to the value established in a previous cascade layer.
- unset :: resets the property to its natural value, which means that if the property is naturally inherited it acts like inherit, otherwise it acts like initial.

*** Cascade
At a very simple level, this means that the origin, the cascade layer, and the order of CSS rules matter. When two rules from the same cascade layer apply and both have equal specificity, the one that is defined last in the stylesheet is the one that will be used.

There are three factors to consider, listed here in increasing order of importance. Later ones overrule earlier ones:
- *Source order*: only matters when the specificity weight of the rules is the same
- *Specificity*:
- *Importance*:

#+begin_src css

/* both the rules are from the same source, have an identical element */
/* selector, and therefore, carry the same specificity, but the last one */
/* in the source order wins. */
h1 { color: red; }
h1 { color: blue; }

#+end_src

The user agent goes through several, very clearly-defined steps to determine the values that get assigned to every property for every element.
1. *Relevance*: Find all the declaration blocks with a selector match for each element.
2. *Importance*: Sort rules based on if they are normal or important. Important styles are those that have the ~!important~ flag set.
3. *Origin*: Within each of the two importance buckets, sort rules by author, user, or user-agent origin.
4. *Layers*: Within each of the six origin importance bucket, sort by cascade layer. The layer order for normal declarations is from first layer created to last, followed by unlayered normal styles. This order is inverted for important styles, with unlayered important styles having the lowest precedence.
5. *Specificity*: For competing styles in the origin layer with precedence, sort declarations by specificity.
6. *Proximity*: When two selectors in the origin layer with precedence have the same specificity, the property value from the last declared selector with the highest specificity wins.

*** Specificity
Specificity refers to the relative weights of various rules. It determines which *styles apply* to an element *when more than one rule could apply*.

- An *Element selector* is less specific has a specificity of ~1~. *Pseudo-element* selectors have the same specificity.
- A *Class selector* is more specific has a specificity of ~1,0~. *Attribute selectors* and *Pseudo-classes* have the same weight.
- An *ID selector*  is more more specific has a specificity of ~1,0,0~.

*Notes*:
- Because the specificity values do not carry over as in the decimal system, commas are used to separate the "digits" (a CSS rule having ~11~ elements and ~11~ classes would have a specificity of ~11,11~, not ~121~).
- The universal selector (~*~), combinators(~+~, ~>~ , '~~~' , ~' '~ ), and specificity adjustment selector ( ~:where()~ ) along with its parameters, have no effect on specificity.
- The best way to evaluate specificity is to score the specificity levels individually starting from the highest and moving on to the lowest when necessary. Only when there is a tie between selector scores within a specificity column do you need to evaluate the next column down; otherwise, you can disregard the lower specificity selectors since they can never overwrite the higher specificity selectors.
- Inline styles, that is, the style declaration inside a ~style~ attribute, take precedence over all normal styles, no matter the specificity.

Thus the selectors of the following rule result in the indicated specificity:

| /Selectors/            | /Specificity/ |
|----------------------+-------------|
| h1 { }               | 0, 0, 0, 1  |
| p em { }             | 0, 0, 0, 2  |
| .grape { }           | 0, 0, 1, 0  |
| p.bright { }         | 0, 0, 1, 1  |
| p.bright em.dark { } | 0, 0, 2, 2  |
| #id218 { }           | 0, 1, 0, 0  |
| style=" "            | 1, 0, 0, 0  |

** Responsive design
*** Brief
HTML is fundamentally responsive, or fluid. If you create a web page containing only HTML, with no CSS, and resize the window, the browser will automatically reflow the text to fit the viewport. While the default responsive behavior may sound like no solution is needed, long lines of text displayed full screen on a wide monitor can be difficult to read. Responsive web design *isn't a separate technology* — it *is an approach*.

The term responsive design, coined by Ethan Marcotte in 2010, described using fluid grids, fluid images, and media queries to create responsive content.

At the time, the recommendation was to use CSS ~float~ for layout and media queries to query the browser width, creating layouts for different breakpoints. Fluid images are set to not exceed the width of their container; they have their ~max-width~ property set to ~100%~ . Fluid images scale down when their containing column narrows but do not grow larger than their intrinsic size when the column grows. This enables an image to scale down to fit its content, rather than overflow it, but not grow larger and become pixelated if the container becomes wider than the image.

Responsive sites are built on flexible grids, meaning you *don't need* to target every possible device size with pixel perfect layouts. Several layout methods, including [[Multi-column layout][Multiple-column layout]], [[Flexbox]], and [[Grid]] *are responsive by default*. They all assume that you are trying to create a flexible grid.

*** Media Queries
**** Brief
Media queries allow us to run a series of tests and apply CSS selectively to style the page appropriately, that is media queries use conditional logic for applying CSS styling. Media queries are a key part of responsive web design, as they allow you to create different layouts depending on the size of the viewport, but they can also be used to detect other things about the environment your site is running on, for example whether the user is using a touchscreen rather than a mouse.

A common approach when using Media Queries is to create a simple single-column layout for narrow-screen devices (e.g. mobile phones), then check for wider screens and implement a multiple-column layout when you know that you have enough screen width to handle it.

If using breakpoints, best practices encourage defining media query breakpoints with relative units rather than absolute sizes of an individual device.

Media queries can help with Responsive Web Design, but are not a requirement. Flexible grids, relative units, and minimum and maximum unit values can be used without queries.

The simplest media query syntax looks like this:

#+begin_src css

@media media-type and (media-feature-rule) {
  /* CSS rules go here */
}

/* A media type, which tells the browser what kind of media this code is */
/* for (e.g. print, screen or all (default)). */
/* A media expression, which is a rule, or test that must be passed for  */
/* the contained CSS to be applied. */

#+end_src

**** width and height
The feature we tend to detect most often in order to create responsive designs (and that has widespread browser support) is viewport width, and we can apply CSS if the viewport is above or below a certain width — or an exact width — using the ~min-width~, ~max-width~, and ~width~ media features.

#+begin_src css

@media screen and (max-width: 600px) {
  body {
    color: blue;
  }
}

#+end_src

**** Orientation
One well-supported media feature is orientation, which allows us to test for portrait or landscape mode.

#+begin_src css

@media (orientation: landscape) {
  body {
    color: rebeccapurple;
  }
}

#+end_src

**** Use of pointing devices
This feature means you can *test* if the user has the ability to hover over an element, which essentially means they are using some kind of pointing device; touchscreen and keyboard navigation does not hover.

#+begin_src css

/* Si el usuario está usando un dispositivo que tenga hover (desktop) las */
/* letras se pintaran de morado, en cambio si usa un dispositivo que no */
/* lo tenga (mobile) no se pintarán. */
@media (hover: hover) {
  body {
    color: rebeccapurple;
  }
}

#+end_src

**** and, or, not logic in media queries
- You can use ~and~ to combine a media type and feature.
- If you have a set of queries, any of which could match, then you can comma (~,~) separate these queries.
- You can negate an entire media query by using the ~not~ operator. This reverses the meaning of the entire media query.

#+begin_src css

@media screen and (min-width: 600px) and (orientation: landscape) {
  body {
    color: blue;
  }
}


/* The text will be blue if the viewport is at least 600 pixels wide OR */
/* the device is in landscape orientation. If either of these things are */
/* true the query matches. */
@media screen and (min-width: 600px), screen and (orientation: landscape) {
  body {
    color: blue;
  }
}


/* Text will only be blue if the orientation is portrait. */
@media not all and (orientation: landscape) {
  body {
    color: blue;
  }
}

#+end_src

*** Responsive images
**** Scales media
Responsive Images, using the ~<picture>~ element and the ~<img>~ ~srcset~ and ~sizes~ attributes enables serving images targeted to the user's viewport and the device's resolution.

To ensure media is never larger than its responsive container, the following approach can be used:

#+begin_src css

/* This scales media to ensure they never overflow their */
/* containers. Using a single large image and scaling it down to fit */
/* small devices wastes bandwidth by downloading images larger than what */
/* is needed. */
img,
picture,
video {
  max-width: 100%;
}

#+end_src

**** Resolution switching: Different sizes
We want to display identical image content, just larger or smaller depending on the device. We can use two attributes — ~srcset~ and ~sizes~ — to provide several additional source images along with hints (metadata that describes the screen size and resolution the image is best suited for) to help the browser pick the right one.

~srcset~ defines the set of images we will allow the browser to choose between, and what size each image is. The image's intrinsic width in pixels (~480w~) — note that this uses the ~w~ unit, not ~px~ as you might expect. An image's [[The natural or intrinsic size of things][intrinsic]] size is its real size.

~sizes~ defines a set of media conditions (e.g. screen widths). ~480px~ especify the width of the slot the image will fill when the media condition is true.

The browser will load the image referenced in the ~srcset~ list that has the same size as the slot or, if there isn't one, the first image that is bigger than the chosen slot size.

*Note*:
- For the slot width, rather than providing an absolute width (for example, ~480px~), you can alternatively provide a width relative to the viewport (for example, ~50vw~) — but not a percentage.
- When testing this with a desktop browser, if the browser fails to load the narrower images when you've got its window set to the narrowest width, have a look at what the viewport is (you can approximate it by going into the browser's JavaScript console and typing in ~document.querySelector('html').clientWidth~). Different browsers have minimum sizes that they'll let you reduce the window width to, and they might be wider than you'd think.

#+begin_src html

<img
  srcset="elva-fairy-480w.jpg 480w, elva-fairy-800w.jpg 800w"
  sizes="(max-width: 600px) 480px,
         800px" <!-- This width has no media condition, this is the default. -->
  src="elva-fairy-800w.jpg"  <!-- This is set if the browser does not -->
                             <!-- understand the attributes of the previous -->
                             <!-- ones or if it does not choose any of -->
                             <!-- them. -->
  alt="Elva dressed as a fairy" />

#+end_src

**** Resolution switching: Same size, different resolutions
If you're supporting multiple display resolutions, but everyone sees your image at the same real-world size on the screen, you can allow the browser to choose an appropriate resolution image by using ~srcset~ with x-descriptors and without ~sizes~.

In this case, ~sizes~ is not needed — the browser works out what resolution the display is that it is being shown on, and serves the most appropriate image referenced in the ~srcset~. So if the device accessing the page has a standard/low resolution display, with one device pixel representing each CSS pixel, the ~elva-fairy-320w.jpg~ image will be loaded (the 1x is implied, so you don't need to include it.) If the device has a high resolution of two device pixels per CSS pixel or more, the ~elva-fairy-640w.jpg~ image will be loaded.

#+begin_src html

<img
  srcset="elva-fairy-320w.jpg, elva-fairy-480w.jpg 1.5x, elva-fairy-640w.jpg 2x"
  src="elva-fairy-640w.jpg"
  alt="Elva dressed as a fairy" />

#+end_src

#+begin_src css

/* In this example, the following CSS is applied to the image so that it */
/* will have a width of 320 pixels on the screen (also called CSS */
/* pixels): */
img {
  width: 320px;
}

#+end_src

**** Art direction
The art direction problem involves wanting to change the image displayed to suit different image display sizes. For example, a web page includes a large landscape shot with a person in the middle when viewed on a desktop browser. When viewed on a mobile browser, that same image is shrunk down, making the person in the image very small and hard to see. It would probably be better to show a smaller, portrait image on mobile, which zooms in on the person. The ~<picture>~ element allows us to implement just this kind of solution.

You could offer multiple images via a ~<picture>~ element, but then also offer multiple resolutions of each one. Realistically, you probably won't want to do this kind of thing very often.

Why can't we just do this using CSS or JavaScript?

When the browser starts to load a page, it starts to download (preload) any images before the main parser has started to load and interpret the page's CSS and JavaScript. That mechanism is useful in general for reducing page load times, but it is not helpful for responsive images — hence the need to implement solutions like ~srcset~. For example, you couldn't load the ~<img>~ element, then detect the viewport width with JavaScript, and then dynamically change the source image to a smaller one if desired. By then, the original image would already have been loaded, and you would load the small image as well, which is even worse in responsive image terms.

#+begin_src html

<picture>
  <source media="(max-width: 799px)" srcset="elva-480w-close-portrait.jpg" />
  <!-- you could actually remove below element -->
  <source media="(min-width: 800px)" srcset="elva-800w.jpg" />
  <img src="elva-800w.jpg" alt="Chris standing up holding his daughter Elva" />
<!-- you must provide an <img> element, with src and alt, right before -->
<!-- </picture>, otherwise no images will appear. This provides a default -->
<!-- case that will apply when none of the media conditions return true and -->
<!-- a fallback for browsers that don't support the <picture> element. -->
</picture>

#+end_src

*** Responsive typography
**** Using media queries
In this example, we want to set our level 1 heading to be ~4rem~, meaning it will be four times our base font size. That's a really large heading! We only want this jumbo heading on larger screen sizes, therefore we first create a smaller heading then use media queries to overwrite it with the larger size if we know that the user has a screen size of at least ~1200px~.

As this approach to typography shows, you do not need to restrict media queries to only changing the layout of the page. They can be used to tweak any element to make it more usable or attractive at alternate screen sizes.

#+begin_src css

html {
  font-size: 1em;
}

h1 {
  font-size: 2rem;
}

@media (min-width: 1200px) {
  h1 {
    font-size: 4rem;
  }
}

#+end_src

**** Using viewport units
Viewport units ~vw~ can also be used to enable responsive typography, without the need for setting breakpoints with media queries. ~1vw~ is equal to one percent of the viewport width, meaning that if you set your font size using ~vw~, it will always relate to the size of the viewport.

#+begin_src css

h1 {
  font-size: 6vw;
}

#+end_src

The problem with doing the above is that the user loses the ability to zoom any text set using the vw unit, as that text is always related to the size of the viewport. *Therefore you should never set text using viewport units alone*.

There is a solution, and it involves using ~calc()~. If you add the ~vw~ unit to a value set using a fixed size such as ~ems~ or ~rems~ then the text will still be zoomable. Essentially, the ~vw~ unit adds on top of that zoomed value:

This means that we only need to specify the font size for the heading once, rather than set it up for mobile and redefine it in the media queries. The font then gradually increases as you increase the size of the viewport.

#+begin_src css

h1 {
  font-size: calc(1.5rem + 3vw);
}

#+end_src

*** Example website mobile first responsive design
The view for the very smallest devices is quite often a simple single column of content, much as it appears in normal flow. This means that you probably don't need to do a lot of layout for small devices.

#+begin_src css

 * {
  box-sizing: border-box;
}

body {
  width: 90%;
  margin: 2em auto;
  font: 1em/1.3 Arial, Helvetica, sans-serif;
}

a:link,
a:visited {
  color: #333;
}

nav ul,
aside ul {
  list-style: none;
  padding: 0;
}

nav a:link,
nav a:visited {
  background-color: rgba(207, 232, 220, 0.2);
  border: 2px solid rgb(79, 185, 227);
  text-decoration: none;
  display: block;
  padding: 10px;
  color: #333;
  font-weight: bold;
}

nav a:hover {
  background-color: rgba(207, 232, 220, 0.7);
}

.related {
  background-color: rgba(79, 185, 227, 0.3);
  border: 1px solid rgb(79, 185, 227);
  padding: 10px;
}

.sidebar {
  background-color: rgba(207, 232, 220, 0.5);
  padding: 10px;
}

article {
  margin-bottom: 1em;
}


#+end_src

#+begin_src html

  <div class="wrapper">
    <header>
      <nav>
        <ul>
          <li><a href="">About</a></li>
          <li><a href="">Contact</a></li>
          <li><a href="">Meet the team</a></li>
          <li><a href="">Blog</a></li>
        </ul>
      </nav>
    </header>
    <main>
      <article>
        <div class="content">
          <h1>Veggies!</h1>
          <p>…</p>
        </div>
        <aside class="related">
          <p>…</p>
        </aside>
      </article>

      <aside class="sidebar">
        <h2>External vegetable-based links</h2>
        <ul>
          <li>…</li>
        </ul>
      </aside>
    </main>

    <footer><p>&copy;2019</p></footer>
  </div>

#+end_src

We've made no layout changes, however the source of the document is ordered in a way that makes the content readable. This is an important first step and one which ensures that if the content were to be read out by a screen reader, it would be understandable.

From this point, start to drag the Responsive Design Mode view wider until you can see that the line lengths are becoming quite long, and we have space for the navigation to display in a horizontal line. This is where we'll add our first media query. We'll use ~ems~, as this will mean that if the user has increased their text size, the breakpoint will happen at a similar line-length but wider viewport, than someone with a smaller text size.

#+begin_src css

@media screen and (min-width: 40em) {
  article {
    display: grid;
    grid-template-columns: 3fr 1fr;
    column-gap: 20px;
  }

  nav ul {
    display: flex;
  }

  nav li {
    flex: 1;
  }
}

#+end_src

Let's continue to expand the width until we feel there is enough room for the sidebar to also form a new column. Inside a media query we'll make the main element into a two column grid. We then need to remove the margin-bottom on the article in order that the two sidebars align with each other, and we'll add a border to the top of the footer. *Typically these small tweaks are the kind of thing you will do to make the design look good at each breakpoint*.

#+begin_src css

@media screen and (min-width: 70em) {
  main {
    display: grid;
    grid-template-columns: 3fr 1fr;
    column-gap: 20px;
  }

  article {
    margin-bottom: 0;
  }

  footer {
    border-top: 1px solid #ccc;
    margin-top: 2em;
  }
}

#+end_src

* Website
** Fundamental concepts
1. Each documet must have a locator or identifier [[URL]].
2. There must be a language in which computers comunicate to request and deliver documents to each other. (HTTP)
3. There must be a way to encode the documents so that the other computer is able to display it on the screen [[HTML]].

** URI
*** Definition
A *Uniform Resource Identifier* is a unique sequence of characters that *identifies* a logical or physical resource used by web technologies.

Some URIs provide a means of *locating* and retrieving information resources on a network; these are *Uniform Resource Locators* (URLs). A URL provides the location of the resource. A URI identifies the resource by name at the specified location or URL. Other URIs provide only a unique *name*, without a means of locating or retrieving the resource or information about it, these are *Uniform Resource Names* (URNs).

A *URN* is analogous to a *person's name*, while a *URL* is analogous to their *street address*. In other words, a URN identifies an item and a URL provides a method for finding it.

The URI generic syntax consists of five components organized hierarchically in order of decreasing significance from left to right:
~URI = scheme ":" ["//" authority] path ["?" query] ["#" fragment]~

The authority component consists of subcomponents:
~authority = [userinfo "@"] host [":" port]~

#+begin_src

        URI
  ┌──────┴──────┐
  +-------------+
  | URL  |  URN |
  +-------------+


        userinfo     host    port
        ┌──┴───┐ ┌────┴────┐ ┌┴┐
https://john.doe@www.exa.com:123/forum/questi/?tag=net&order=new#top
└─┬─┘   └───────────┬──────────┘└─────┬──────┘ └────────┬──────┘ └┬┘
scheme          authority           path               query  fragment


mailto:John.Doe@example.com
└─┬─┘  └────────┬─────────┘
scheme        path

#+end_src

*** URL
A Uniform Resource Locator is a URI that specifies the means of acting upon or obtaining the representation of a resource, i.e. specifying both its *primary access mechanism* and *network location*.

For example, the URL http://example.org/wiki/Main_Page refers to a resource identified as ~/wiki/Main_Page~, whose representation is obtainable via the Hypertext Transfer Protocol (~http:~) from a network host whose domain name is ~example.org~.

*Relative URL*:
A relative URL gives you the location of resource relative to the location of the resource that contains the URL.

*Examples*:
A relative URL beginning with (~/~) replaces the entire path of the base URL.
~http://www.conclase.net/hola.txt~
~/hola.txt~ (relative URL)

A URL beginning with (~//~) replaces everything in the base URL from the included destination name
~http://www.yahoo.com/~
~//www.yahoo.com/~ (relative URL)

*Note*: Directories always end with a slash (~/~) and files end without a slash (~/~).

*** URN
A Uniform Resource Name is a URI that *identifies* a resource *by name* in a particular namespace. A URN may be used to talk about a resource without implying its location or how to access it.

** Website structure
*** Basic sections of a document
**** header
Usually a big strip across the top with a big heading, logo, and perhaps a tagline. This usually stays the same from one webpage to another.

[[header][<header>]]: Represents a group of introductory content. If it is a child of ~<body>~ it defines the global header of a webpage, but if it's a child of an ~<article>~ or ~<section>~ it defines a specific header for that section (try not to confuse this with titles and headings).

**** navigation bar
Links to the site's main sections; usually represented by menu buttons, links, or tabs.

[[nav][<nav>]]: Contains the main navigation functionality for the page. Secondary links, etc., would not go in the navigation.

*Note*: Having the navigation bar separate the header is better for accessibility, as screen readers can read the two features better if they are separate.

**** main content
A big area in the center that contains most of the unique content of a given webpage. This is the one part of the website that definitely will vary from page to page!

[[main][<main>]]: Is for content unique to this page. Use ~<main>~ only once per page, and put it directly inside ~<body>~. Ideally this shouldn't be nested within other elements.

[[article][<article>]] (subsections): Encloses a block of related content that makes sense on its own without the rest of the page (e.g., a single blog post).

[[section][<section>]] (subsections): Is similar to ~<article>~, but it is more for grouping together a single part of the page that constitutes one single piece of functionality (e.g., a mini map, or a set of article headlines and summaries), or a theme.

[[dic][<div>]] (subsections)

*Note*: It's considered best practice to begin each section with a heading; also note that you can break ~<article>~ s up into different ~<section>~ s, or ~<section>~ s up into different ~<article>~ s, depending on the context.

**** sidebar
Some peripheral info, links, quotes, ads, etc. Usually, this is contextual to what is contained in the main content.

[[aside][<aside>]] (often placed inside ~<main>~): Contains content that is *not directly related* to the main content *but* can provide additional information *indirectly related* to it (glossary entries, author biography, related links, etc.).

**** footer
A strip across the bottom of the page that generally contains fine print, copyright notices, or contact info. It's a place to put common information (like the header) but usually, that information is not critical or secondary to the website itself. The footer is also sometimes used for SEO purposes, by providing links for quick access to popular content.

[[footer][<footer>]]: Represents a group of end content for a page.

**** Example website structure

#+begin_src html

<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>My page title</title>
    <link
    href="https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300|Sonsie+One"
      rel="stylesheet" />
    <link rel="stylesheet" href="style.css" />
  </head>

  <body>

<!-- Here is our main header that is used across all the pages of our website -->
    <header>
      <h1>Header</h1>
    </header>

    <nav>
      <ul>
        <li><a href="#">Home</a></li>
        <li><a href="#">Our team</a></li>
        <li><a href="#">Projects</a></li>
        <li><a href="#">Contact</a></li>
      </ul>

<!-- A Search form is another common non-linear way to navigate through a website. -->
      <form>
        <input type="search" name="q" placeholder="Search query" />
        <input type="submit" value="Go!" />
      </form>
    </nav>

    <!-- Here is our page's main content -->
    <main>

      <!-- It contains an article -->
      <article>
        <h2>Article heading</h2>

        <p>
          Lorem ipsum dolor ...
          Lorem ipsum dolor ...
        </p>

        <h3>Subsection</h3>

        <p>
          Lorem ipsum dolor ...
          Lorem ipsum dolor ...
        </p>

        <p>
          Lorem ipsum dolor ...
          Lorem ipsum dolor ...
        </p>

        <h3>Another subsection</h3>

        <p>
          Lorem ipsum dolor ...
          Lorem ipsum dolor ...
        </p>

        <p>
          Lorem ipsum dolor ...
          Lorem ipsum dolor ...
        </p>
      </article>

      <!-- the aside content can also be nested within the main content -->
      <aside>
        <h2>Related</h2>

        <ul>
          <li><a href="#">Oh I do like to be beside the seaside</a></li>
          <li><a href="#">Although in the North of England</a></li>
          <li><a href="#">Oh well…</a></li>
        </ul>
      </aside>
    </main>

<!-- And here is our main footer that is used across all the pages of our website -->
    <footer>
      <p>©Copyright 2050 by nobody. All rights reversed.</p>
    </footer>
  </body>
</html>

#+end_src

*** Planning a simple example website
- common to every page :: bear in mind that you'll have a few elements common to most (if not all) pages. (navigation menu, and the footer content)

- draw a rough sketch ::

#+begin_src

   +-------------------------------------+
   |         HEADER                      |
   |-------------------------------------|
   |                           |         |
   |         MAIN CONTENT      | SIDEBAR |
   |                           |         |
   |                           |         |
   |-------------------------------------|
   |        FOOTER                       |
   +-------------------------------------+

#+end_src

- brainstorm :: Brainstorm all the other (not common to every page) content you want to have on your website — write a big list down. (languages, math, computer, algorithm, English ...)

- sort all content :: next, try to sort all these content items into groups, to give you an idea of what parts might live together on different pages. This is very similar to a technique called Card sorting. (Languages: English - Spanish, Computer: Algorithm, Programming, ...)

- sketch a rough sitemap :: now try to sketch a rough sitemap — have a bubble for each page on your site, and draw lines to show the typical workflow between pages. The homepage will probably be in the center, and link to most if not all of the others; most of the pages in a small site should be available from the main navigation, although there are exceptions. You might also want to include notes about how things might be presented.

** Order in which component files are parsed
- The browser parses the HTML file first, and that leads to the browser recognizing any ~<link>~-element references to external CSS stylesheets and any ~<script>~-element references to scripts.
- As the browser parses the HTML, it sends requests back to the server for any CSS files it has found from ~<link>~ elements, and any JavaScript files it has found from ~<script>~ elements, and from those, then parses the CSS and JavaScript.
- The browser generates an in-memory [[DOM]] tree from the parsed HTML, generates an in-memory CSSOM structure from the parsed CSS, and compiles and executes the parsed JavaScript.
- As the browser builds the DOM tree and applies the styles from the CSSOM tree and executes the JavaScript, a visual representation of the page is painted to the screen, and the user sees the page content and can begin to interact with it.

** What will your website look like?
- what structure should your website have? :: The most common things we'll have on any website project we create are an index HTML file and folders to contain images, style files, and script files.
- what information does my website offer? ::
- what fonts and colors do I want? ::
- what does my site do? ::

** How browsers work
*** Overview
For the most part, browsers are considered single-threaded. That is, they execute a task from beginning to end before taking up another task. For smooth interactions, the developer's goal is to ensure performant site interactions, from smooth scrolling to being responsive to touch. Render time is key, with ensuring the main thread can complete all the work we throw at it and still always be available to handle user interactions.

#+begin_src artist

  +-----------+                               +------------+
  |           |                               |            |
  |   PC      |<--------DNS-Lookup----------->|   DNS      |
  |           |                               |            |
  |           |                               +------------+
  |           |                               +------------+
  |           |<-------TCP-Handshake--------->|   Site     |
  |           |                               +------------+
  |           |<-------SSL-Handshake--------->|            |
  |           |                               +------------+
  |           |-------HTTP-GET-Request------->|            |
  |           |                               |            |
  |           |<------14KB-response-----------|            |
  |           |-----------ACK---------------->|            |
  |           |<------28KB-response-----------|            |
  |           |-----------ACK---------------->|            |
  |           |<------56KB-response-----------|            |
  |           |-----------ACK---------------->|            |
  +-----------+                               +------------+

#+end_src

*** Navigation
Navigation is the first step in loading a web page. It occurs whenever a user requests a page by entering a URL into the address bar, clicking a link, submitting a form, as well as other actions.

- DNS Lookup :: the first step of navigating to a web page is finding where the assets for that page are located, that is, the IP address. DNS lookups must be done for each unique hostname the requested page references. If your fonts, images, scripts, ads, and metrics all have different hostnames, a DNS lookup will have to be made for each one. This can be problematic for performance, particularly on mobile networks. When a user is on a mobile network, each DNS lookup has to go from the phone to the cell tower to reach an authoritative DNS server.

- TCP Handshake :: once the IP address is known, the browser sets up a connection to the server via a TCP three-way handshake SYN, SYN-ACK, ACK.

- TLS Negotiation :: for secure connections established over HTTPS, another "handshake" is required. This handshake, or rather the TLS negotiation, determines which cipher will be used to encrypt the communication, verifies the server, and establishes that a secure connection. After the 8 round trips, the browser is finally able to make the request.

#+begin_src artist

  +-----------+                              +-------------+
  |   PC      |--------www.example.com------>|     DNS     |
  |           |<-------93.184.216.34---------|             |
  |           |                              +-------------+
  |           |                              +-------------+
  |           |------------SYN-------------->|             |
  |           |<---------SYN-ACK-------------|     SITE    |
  |           |------------ACK-------------->|             |
  |           |                              +-------------+
  |           |--------ClientHello---------->|             |
  |           |<--ServerHello-&-Certificate--|             |
  |           |--------ClientKey------------>|             |
  |           |                              +-------------+
  +-----------+

#+end_src

*** Response
Once we have an established connection to a web server, the browser sends an initial [[file:Networks.org::GET][HTTP GET request]] on behalf of the user.

This response for this initial request contains the first byte of data received. *Time to First Byte (TTFB)* is the time between when the user made the request—say by clicking on a link—and the receipt of this first packet of HTML. The first chunk of content is usually 14KB of data.

The first response packet will be 14KB. This is part of *TCP slow start* (14KB rule), an algorithm which balances the speed of a network connection. Slow start gradually increases the amount of data transmitted until the network's maximum bandwidth can be determined. In TCP slow start, after receipt of the initial packet, the server doubles the size of the next packet to around 28KB. Subsequent packets increase in size until a predetermined threshold is reached, or congestion is experienced.

As the server sends data in TCP packets, the user's client confirms delivery by returning acknowledgements, or ACKs. The connection has a limited capacity depending on hardware and network conditions. If the server sends too many packets too quickly, they will be dropped. Meaning, there will be no acknowledgement. The server registers this as missing ACKs. Congestion control algorithms use this flow of sent packets and ACKs to determine a send rate.

#+begin_src artist

  +-----------+                               +------------+
  |   PC      |<--------DNS-Lookup----------->|   DNS      |
  |           |                               +------------+
  |           |                               +------------+
  |           |<-------TCP-Handshake--------->|   Site     |
  |           |                               +------------+
  |           |<-------SSL-Handshake--------->|            |
  |           |                               +------------+
  |           |-------HTTP-GET-Request------->|            |
  |           |                               |            |
  |           |<------14KB-response-----------|            |
  |           |-----------ACK---------------->|            |
  |           |<------28KB-response-----------|            |
  |           |-----------ACK---------------->|            |
  |           |<------56KB-response-----------|            |
  |           |-----------ACK---------------->|            |
  +-----------+                               +------------+

#+end_src

*** Parsing
**** Definition
Once the browser receives the first chunk of data, it can begin parsing the information received.

It's important for web performance optimization to include everything the browser needs to start rendering a page, or at least a template of the page - the CSS and HTML needed for the first render — in the first 14 kilobytes. But before anything is rendered to the screen, the HTML, CSS, and JavaScript have to be parsed.

#+begin_src artist

       +--------------+
       |     HTML     |
       +--------------+
         /           \
  +------------+       \ +--------------+
  |    HEAD    |         |     BODY     |
  +------------+         +--------------+
   |                      |
   |  +-----------+       | +-------------+   +----------------+
   |--|   META    |       |-|     H1      |---| class:"heading"|
   |  +-----------+       | +-------------+   +----------------+
   |  +-----------+       | +-------------+
   |--|   TITLE   |       |-|     P       |
   |  +-----------+       | +-------------+
   |  +-----------+       |     | +---------------+
   |--|   LINK    |       |     |-| a paragraph ..|
   |  +-----------+       |     | +---------------+
   |  +-----------+       |     | +---------------+  +--------------+
   |--|   SCRIPT  |       |     |-|    A          |--| href:"htt..."|
      +-----------+       |       +---------------+  +--------------+
                          |          |
                          |          |  +---------------+
                          |          |- |  link         |
                          |             +---------------+
                          |
                          | +---------------+
                          |-|     DIV       |
                          | +---------------+
                          |     | +-------------+ +--------------+
                          |     |-|    IMG      |-| src:"..."    |
                          |       +-------------+ +--------------+
                          | +-----------------+  +-------------+
                          |-|     SCRIPT      |--| src:"..."   |
                            +-----------------+  +-------------+

#+end_src

**** Building the DOM tree (1step)
*The first step* is processing the HTML markup and building the DOM tree. HTML parsing involves tokenization and tree construction.

The DOM tree describes the content of the document. The ~<html>~ element is the first tag and root node of the document tree. The tree reflects the relationships and hierarchies between different tags. Tags nested within other tags are child nodes. The greater the number of DOM nodes, the longer it takes to construct the DOM tree.

When the parser finds non-blocking resources, such as an image, the browser will request those resources and continue parsing. Parsing can continue when a CSS file is encountered, but ~<script>~ tags—particularly those without an ~async~ or ~defer~ attribute—block rendering, and pause the parsing of HTML. Though the browser's preload scanner hastens this process, excessive scripts can still be a significant bottleneck.

**** Preload scanner
While the browser builds the DOM tree, this process occupies the main thread. As this happens, the preload scanner will parse through the content available and request high priority resources like CSS, JavaScript, and web fonts. Thanks to the preload scanner, we don't have to wait until the parser finds a reference to an external resource to request it. It will retrieve resources in the background so that by the time the main HTML parser reaches requested assets, they may already be in flight, or have been downloaded. The optimizations the preload scanner provides reduce blockages.

**** Building the CSSOM (2step)
*The second step* in the critical rendering path is processing CSS and building the CSSOM tree. The browser goes through each rule set in the CSS, creating a tree of nodes with parent, child, and sibling relationships based on the CSS selectors.

The CSSOM tree includes styles from the user agent style sheet. The browser begins with the most general rule applicable to a node and recursively refines the computed styles by applying more specific rules. In other words, it cascades the property values.

Total time to create the CSSOM is very very fast and is generally less than the time it takes for one DNS lookup.

**** Other Processes
*JavaScript Compilation*
While the CSS is being parsed and the CSSOM created, other assets, including JavaScript files, are downloading (thanks to the preload scanner). JavaScript is interpreted, compiled, parsed and executed. The scripts are parsed into abstract syntax trees. Some browser engines take the Abstract Syntax Tree and pass it into an interpreter, outputting bytecode which is executed on the main thread. This is known as JavaScript compilation.

*Building the Accessibility Tree*
The browser also builds an accessibility tree that assistive devices use to parse and interpret content. The accessibility object model (AOM) is like a semantic version of the DOM. The browser updates the accessibility tree when the DOM is updated. The accessibility tree is not modifiable by assistive technologies themselves.

Until the AOM is built, the content is not accessible to screen readers.

*** Render
**** Definition
Rendering steps include style, layout, paint and, in some cases, compositing. The CSSOM and DOM trees created in the parsing step are combined into a *render tree* which is then used to compute the layout of every visible element, which is then painted to the screen.

**** Style (3step)
*The third step* in the critical rendering path is *combining the DOM and CSSOM into a render tree*. The computed style tree, or render tree, construction starts with the root of the DOM tree, traversing each visible node.

Tags that aren't going to be displayed, like the ~<head>~ and its children and any nodes with ~display: none~, such as the script ~{ display: none; }~ you will find in user agent stylesheets, are not included in the render tree as they will not appear in the rendered output. Nodes with ~visibility: hidden~ applied are included in the render tree, as they do take up space.

**** Layout (4step)
*The fourth step* in the critical rendering path is running layout on the render tree *to compute the geometry of each node*. *Layout* is the process by which the width, height, and location of all the nodes in the render tree are determined, plus the determination of the size and position of each object on the page. *Reflow* is any subsequent size and position determination of any part of the page or the entire document.

**** Paint (5step)
*The last step* in the critical rendering path is *painting the individual nodes to the screen*, the first occurrence of which is called the *first meaningful paint*. In the painting or rasterization phase, the browser converts each box calculated in the layout phase to actual pixels on the screen. Painting involves drawing every visual part of an element to the screen, including text, colors, borders, shadows, and replaced elements like buttons and images. The browser needs to do this super quickly.

To ensure smooth scrolling and animation, everything occupying the main thread, including calculating styles, along with reflow and paint, must take the browser less than 16.67ms to accomplish. To ensure repainting can be done even faster than the initial paint, the drawing to the screen is generally broken down into several layers. If this occurs, then compositing is necessary.

**** Compositing
When sections of the document are drawn in different layers, overlapping each other, compositing is necessary to ensure they are drawn to the screen in the right order and the content is rendered correctly.

As the page continues to load assets, reflows can happen. A reflow sparks a repaint and a re-composite. Had we defined the size of our image, no reflow would have been necessary, and only the layer that needed to be repainted would be repainted, and composited if necessary. But we didn't include the image size! When the image is obtained from the server, the rendering process goes back to the layout steps and restarts from there.

*** Interactivity
Once the main thread is done painting the page, you would think we would be "all set." That isn't necessarily the case. If the load includes JavaScript, that was correctly deferred, and only executed after the ~onload~ event fires, the main thread might be busy, and not available for scrolling, touch, and other interactions.

*Time to Interactive (TTI)* is the measurement of how long it took from that first request which led to the DNS lookup and SSL connection to when the page is interactive — interactive being the point in time after the First Contentful Paint when the page responds to user interactions within 50ms. If the main thread is occupied parsing, compiling, and executing JavaScript, it is not available and therefore not able to respond to user interactions in a timely (less than 50ms) fashion.

For example, maybe an image loads quickly, but perhaps an ~anotherscript.js~ file is 2MB and the user's network connection is slow. In this case the user would see the page super quickly, but wouldn't be able to scroll without jank until the script was downloaded, parsed and executed. That is not a good user experience. Avoid occupying the main thread

** Guidelines for building a website
1. [[What will your website look like?]]
2. [[Planning a simple example website]]
3. [[Basic sections of a document]]
4. [[Example website mobile first responsive design]]
5. [[Example website logical sections in style sheet]]
6. [[Example website text styling]]
7. [[Guidelines for SEO]]

* SEO
** Search Engine Optimization
Making your content search-friendly matters because it's how you get more relevant users viewing your content. This is called search engine optimization (SEO the process of making your site better for search engines), which can result in more interested users coming to your site. If Google Search has trouble understanding your page, you're possibly missing out on an important source of traffic.

** Google Search
*** Three stages of Google Search
Google Search works in three stages, and not all pages make it through each stage:

1. *Crawling*: Google downloads text, images, and videos from pages it found on the internet with automated programs called [[Crawler][crawlers]].
2. *Indexing*: Google analyzes the text, images, and video files on the page, and stores the information in the Google [[Index][index]], which is a large database. This stage includes processing and analyzing the textual content and key content tags and attributes, such as [[title][<title>]] elements and [[alt]] attributes, images, videos, and more.
3. *Serving search results*: When a user searches on Google, Google returns information that's relevant to the user's query.

*** E-E-A-T the quality rater guidelines
Google's automated systems are designed to use many different factors to rank great content. After identifying relevant content, our systems aim to prioritize those that seem most helpful. To do this, they identify a mix of factors that can help determine which content demonstrates aspects of *experience*, *expertise*, *authoritativeness*, and *trustworthiness*, or what we call E-E-A-T.

*** Page experience signals
The following signals are important for delivering a good page experience in Google Search. We intend to update the page experience signals on an annual basis.

- Core Web Vitals :: the page provides a good user experience, focusing on the aspects of *loading*, *interactivity*, and *visual stability*:

    - Largest Contentful Paint (LCP) :: *measures loading performance*. To provide a good user experience, strive to have LCP occur within the first 2.5 seconds of the page starting to load.
    - First Input Delay (FID) :: *measures interactivity*. To provide a good user experience, strive to have an FID of less than 100 milliseconds. FID measures the time from when a user first interacts with a page (that is, when they click a link, tap on a button, or use a custom, JavaScript-powered control) to the time when the browser is actually able to begin processing event handlers in response to that interaction.
    - Cumulative Layout Shift (CLS) :: *measures visual stability*. To provide a good user experience, strive to have a CLS score of less than 0..1. CLS is about this: Have you ever been reading an article online when something suddenly changes on the page? Without warning, the text moves, and you've lost your place. Or even worse: you're about to tap a link or a button, but in the instant before your finger lands—BOOM—the link moves, and you end up clicking something else!

- Mobile-friendly :: the page is mobile-friendly. Check if your page is mobile-friendly.

- HTTPS :: the page is served over HTTPS. Check if your site's connection is secure.

- No intrusive interstitials :: the content on the page must be easily accessible to the user. Intrusive interstitials and dialogs are page elements that obstruct users' view of the content, usually for promotional purposes. Interstitials are overlays on the whole page and dialogs are overlays only on a part of the page, sometimes also obfuscating the underlying content.  Intrusive dialogs and interstitials make it hard for Google and other search engines to understand your content, which may lead to poor search performance. Equally, if users find your site hard to use, they are unlikely to want to visit those websites again, including through search engines.

*** Miscellaneous
**** Structured data markup in Google Search
***** Structured data
Google Search works hard to understand the content of a page. You can help us by providing explicit clues about the meaning of a page to Google by including structured data on the page. Structured data is a standardized format for providing information about a page and classifying the page content; for example, on a recipe page, what are the ingredients, the cooking time and temperature, the calories, and so on.

Google Search also uses structured data to enable special search result features and enhancements. For example, a recipe page with valid structured data is eligible to appear in a graphical search result.

***** How structured data works in Google Search
Google uses structured data that it finds on the web to understand the content of the page, as well as to gather information about the web and the world in general, such as information about the people, books, or companies that are included in the markup. For example, here is a JSON-LD structured data snippet that might appear on a recipe page, describing the title of the recipe, the author of the recipe, and other details:

#+begin_src html

<html>
  <head>
    <title>Party Coffee Cake</title>
    <script type="application/ld+json">
    {
      "@context": "https://schema.org/",
      "@type": "Recipe",
      "name": "Party Coffee Cake",
      "author": {
        "@type": "Person",
        "name": "Mary Stone"
      },
      "datePublished": "2018-03-10",
      "description": "This coffee cake is awesome and perfect for parties.",
      "prepTime": "PT20M"
    }
    </script>
  </head>
  <body>
    <h2>Party coffee cake recipe</h2>
    <p>
      <i>by Mary Stone, 2018-03-10</i>
    </p>
    <p>
      This coffee cake is awesome and perfect for parties.
    </p>
    <p>
      Preparation time: 20 minutes
    </p>
  </body>
</html>

#+end_src

**** Use robots meta tags carefully
You can prevent Google from indexing a page or following links through the robots meta tag. For example, adding the following meta tag to the top of your page blocks Google from indexing the page:

#+begin_src html

<!-- Google won't index this page or follow links on this page -->
<meta name="robots" content="noindex, nofollow">

#+end_src

 You can use JavaScript to add a robots meta tag to a page or change its content. The following example code shows how to change the robots meta tag with JavaScript to prevent indexing of the current page if an API call doesn't return content.

 #+begin_src js

fetch('/api/products/' + productId)
  .then(function (response) { return response.json(); })
  .then(function (apiResponse) {
    if (apiResponse.isError) {
      // get the robots meta tag
      var metaRobots = document.querySelector('meta[name="robots"]');
      // if there was no robots meta tag, add one
      if (!metaRobots) {
        metaRobots = document.createElement('meta');
        metaRobots.setAttribute('name', 'robots');
        document.head.appendChild(metaRobots);
      }
      // tell Google to exclude this page from the index
      metaRobots.setAttribute('content', 'noindex');
      // display an error message to the user
      errorMsg.textContent = 'This product is no longer available';
      return;
    }
    // display product information
    // ...
  });

 #+end_src

**** Migrating a single URL
If you move a page permanently to another location, don't forget to implement 301 redirects for your page. If the move is only temporary for some reason, return 302 instead to tell Google to continue to crawl your page.

When a user requests a page that has been removed, you can create a custom 404 page to provide a better experience. Just be sure that when a user requests a page that is no longer there, you return a true 404 error, not a soft 404.

** Best practices for web content
- Ask "Who, How, and Why" about your content :: consider evaluating your content in terms of "Who(created the content), How(the content was created), and Why(was the content created)" as a way to stay on course with what our systems seek to reward. How (the content was created): For example, with product reviews, it can build trust with readers when they understand the number of products that were tested, what the test results were, and how the tests were conducted, all accompanied by evidence of the work involved, such as photographs.

- Design for accessibility :: create pages for users, not just search engines. When you're designing your site, think about the needs of your users, including those who may not be using a JavaScript-capable browser (for example, people who use screen readers or less advanced mobile devices). One of the easiest ways to test your site's accessibility is to preview it in your browser with JavaScript turned off, or to view it in a text-only browser such as Lynx. Viewing a site as text-only can also help you identify other content which may be hard for Google to see, such as text embedded in images.

- Site fast and Accessible :: make sure that your site is secure, fast, accessible to all, and works on all devices.

- Keywords and placement locations :: use words that people would use to look for your content, and place those words in prominent locations on the page, such as the *title and main heading* of a page, and other descriptive locations such as *alt text* and *link text*.

- Know what your readers want (and give it to them) :: think about the words that a user might search for to find a piece of your content. Users who know a lot about the topic might use different keywords in their search queries than someone who is new to the topic. For example, a long-time football fan might search for "fifa", an acronym for the Fédération Internationale de Football Association, while a new fan might use a more general query like "football playoffs". Anticipating these differences in search behavior and accounting for them while writing your content (using a good mix of keyword phrases) could produce positive results. Consider creating a new, useful service that no other site offers. You could also write an original piece of research, break an exciting news story, or leverage your unique user base.

- Optimize placement :: whenever possible, place images near relevant text. When it makes sense, consider placing the most important image near the top of the page.

- Check your links :: [[Googlebot]] navigates from URL to URL by fetching and parsing links, [[Sitemaps][sitemaps]], and redirects. Googlebot treats every URL as if it's the first and only URL it has seen from your site.

To make sure that Googlebot can find all the URLs on your site:
- Use [[a][<a>]] elements that Google can crawl. Generally, Google can only crawl your link if it's an ~<a>~ HTML element (also known as anchor element) with an [[href]] attribute. Ensure that all pages on the site can be reached by a link from another findable page. Make sure the referring link includes either text or, for images, an [[alt]] attribute, that is relevant to the target page. Google can't reliably extract URLs from ~<a>~ elements that don't have an href attribute or other tags that perform as links because of script events.
- Build and submit a sitemap to help Googlebot more intelligently crawl your site. A sitemap is a file where you provide information about the pages, videos, and other files on your site, and the relationships between them.
- For JavaScript apps that have only one HTML page, make sure that each screen or piece of individual content has a URL.

** Best practices for creating Web Stories
*** Storytelling
- Video first :: video is more engaging than text or images. Use as much video as possible, and supplement with images and text.
- Bring your perspective :: go beyond the facts. Share your opinions. Be the protagonist of your own story. Make it relatable.
- Have a narrative arc :: create suspense in your story from one page to another. Bring the user along in the journey by providing context and narrative. Deliver payoff for sticking with you to the end.

*** Design
- Reduce your character count :: avoid including multiple pages with walls of text. Consider reducing text to approximately 280 characters per page (the length of a tweet).
- Don't block text :: make sure text is not blocked by other content on the page. Avoid burned in text; by not using burned in text, you prevent text from being blocked when it gets resized to fit various device sizes.
- Keep text within bounds :: ensure that all text in your Web Story is visible to the reader. Avoid burned in text; by not using burned in text, you prevent text from overflowing when it gets resized to fit various device sizes.
- Use animations mindfully :: bring your stories to life with animations. Avoid distracting or repetitive animations which can cause fatigue.
- Shorten video length :: we recommend videos that are less than 15 seconds per page, or 60 seconds maximum.

*** SEO
- Keep the title short :: keep titles shorter than 90 characters. We recommend using a descriptive title that is shorter than 70 characters.
- Include alt text on images :: we recommend including alt text on your images to improve your story's discoverability.

** Best practices for HTML tags
*** meta tags
**** Definition
[[meta]] tags are HTML tags used to provide additional information about a page to search engines and other clients. Clients process the ~meta~ tags and ignore those they don't support. ~meta~ tags are added to the ~<head>~ section of your HTML page and generally look like this:

#+begin_src html

<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="description" content="Author: A.N. Author, Illustrator: P. Picture, Category: Books, Price:  £9.24, Length: 784 pages">
    <meta name="google-site-verification" content="+nxGUDJ4QpAZ5l9Bsjdi102tLVC21AIh5d1Nl23908vVuFHs34=">
    <title>Example Books - high-quality used books for children</title>
    <meta name="robots" content="noindex,nofollow">
  </head>
</html>

#+end_src

**** Use quality descriptions
Make sure your descriptions are truly descriptive. Because meta descriptions aren't displayed in the pages the user sees, it's easy to let this content slide. But high-quality descriptions can be displayed in Google's search results, and can go a long way to improving the quality and quantity of your search traffic.

#+begin_src html

<!-- Bad (list of keywords): -->
<meta name="description" content="Sewing supplies, yarn, colored pencils,
                                  sewing machines, threads, bobbins, needles">
<!-- Better (explains what shop sells and details as open hours and location): -->
<meta name="description" content="Get everything you need to sew your next
                                  garment. Open Monday-Friday 8-5pm, located
                                  in the Fashion District.">


<!-- Bad (same description used for every news article): -->
<meta name="description" content="Local news in Whoville, delivered to your
                                  doorstep. Find out what happened today.">
<!-- Better (uses a snippet from the specific news article): -->
<meta name="description" content="Upsetting the small town of Whoville, a
                                  local elderly man steals everyone's presents
                                  the night before an important event. Stay
                                  tuned for live updates on the matter.">


<!-- Bad (doesn't summarize the page): -->
<meta name="description" content="Eggs are a source of joy in everyone's life.
                                  When I was a small child, I remember picking
                                  eggs from the hen house and bringing them
                                  to the kitchen. Those were the days.">
<!-- Better (summarizes the whole page): -->
<meta name="description" content="Learn how to cook eggs with this complete
                                  guide in 1 hour or less. We cover all the
                                  methods, including: over-easy,sunny side
                                  up, boiled, and poached.">


<!-- Bad (too short): -->
<meta name="description" content="Mechanical pencil">
<!-- Better (specific and detailed): -->
<meta name="description" content="Self-sharpening mechanical pencil that
                                  autocorrects your penmanship. Includes
                                  2B auto-replenishing lead. Available in
                                  both Vintage Pink and Schoolbus Yellow.
                                  Order 50+ pencils, get free shipping.">

#+end_src

**** Include relevant information in the description
The meta description doesn't just have to be in sentence format; it's also a great place to include information about the page. For example, news or blog postings can list the author, date of publication, or byline information. This can give potential visitors very relevant information that might not be displayed in the [[Snippet][snippet]] otherwise. Similarly, product pages might have the key bits of information—price, age, manufacturer—scattered throughout a page. A good meta description can bring all this data together.

#+begin_src html

<!-- This meta description provides detailed information about a book, and -->
<!-- information is clearly tagged and separated: -->
<meta name="description" content="Written by A.N. Author, Illustrated by V.
                                  Gogh, Price: $17.99, Length: 784 pages">

#+end_src

**** Define a favicon to show in search results
Add a [[link][<link>]] tag to the header of your home page with the following syntax:

#+begin_src html

<link rel="icon" href="/path/to/favicon.ico">

#+end_src

*** Create unique, accurate page titles
A [[title][<title>]] element tells both users and search engines what the topic of a particular page is. Place the ~<title>~ element within the ~<head>~ element of the HTML document, and create unique title text for each page on your site.

Identical or similar descriptions on every page of a site aren't helpful when individual pages appear in search results. Wherever possible, create descriptions that accurately describe the specific page. Use site-level descriptions on the main home page or other aggregation pages, and use page-level descriptions everywhere else.

A title link is the title of a search result on Google Search and other properties (for example, Google News) that links to the web page. Google uses a number of different sources to automatically determine the title link, but you can indicate your preferences by following our best practices for influencing title links.

- Make it clear which text is the main title for the page. Google looks at various sources when creating title links, including the main visual title, heading elements, and other large and prominent text, and it can be confusing if multiple headings carry the same visual weight and prominence. Consider ensuring that your main title is distinctive from other text on a page and stands out as being the most prominent on the page (for example, using a larger font, putting the title text in the first visible [[h1-h6][<h1>]] element on the page, etc).
- Make sure every page on your site has a title specified in the ~<title>~ element.
- Write descriptive and concise text for your ~<title>~ elements. Avoid vague descriptors like "Home" for your home page, or "Profile" for a specific person's profile.
- Avoid unnecessarily long or verbose text in your ~<title>~ elements. While there's no limit on how long a ~<title>~ element can be, the title link is truncated in Google Search results as needed, typically to fit the device width.

#+begin_src html

<head>
  <title>Brandon's Baseball Cards - Buy Cards, Baseball News, Card Prices</title>
  <meta name="description" content="Brandon's Baseball Cards provides a large
                                    selection of vintage and modern baseball
                                    cards for sale. We also offer daily baseball
                                    news and events.">
</head>

#+end_src

*** Write good anchor text
Good anchor text is descriptive, reasonably concise, and relevant to the page that it's on and to the page it links to. It provides context for the link, and sets the expectation for your readers. The better your anchor text, the easier it is for people to navigate your site and for Google to understand what the page you're linking to is about.

*Tip*: Try reading only the anchor text (out of context) and check if it's specific enough to make sense by itself. If you don't know what the page could be about, you need more descriptive anchor text.

#+begin_src html

<!-- Bad (too generic): -->
Learn more about our cheese on our <a href="https://example.com">website</a>.
<a href="https://example.com">Click here</a> to learn more.
<!-- Better (more descriptive): -->
For a full list of cheese available for purchase, see
the <a href="https://example.com">list of cheese types</a>.


<!-- Bad (weirdly long): -->
Starting next Tuesday, the <a href="https://example.com">Knitted Cow invites
  local residents of Wisconsin to their grand re-opening by also offering
  complimentary cow-shaped ice sculptures</a> to the first 20 customers.
<!-- Better (more concise): -->
Starting next Tuesday, the <a href="https://example.com">Knitted Cow invites
  local residents of Wisconsin</a> to their grand re-opening by also offering
complimentary cow-shaped ice sculptures to the first 20 customers.


<!-- Bad (too many links next to each other): -->
I've written about cheese <a href="https://example.com/page1">so</a>
                          <a href="https://example.com/page2">many</a>
                          <a href="https://example.com/page3">times</a>
                          <a href="https://example.com/page4">this</a>
                          <a href="https://example.com/page5">year</a>.
<!-- Better (links are spaced out with context): -->
I've written about cheese so many times this year: who can forget the
<a href="https://example.com/blue-cheese-vs-gorgonzola">controversy over blue
  cheese and gorgonzola</a>, the <a href="https://example.com/worlds-oldest-brie">
  world's oldest brie</a> piece that won the Cheesiest Research Medal, the epic
retelling of <a href="https://example.com/the-lost-cheese">The Lost Cheese</a>,
and my personal favorite, <a href="https://example.com/boy-and-his-cheese">A
  Boy and His Cheese: a story of two unlikely friends</a>.


#+end_src

*** Images
**** Semantic HTML for images
Using semantic HTML markup helps crawlers find and process images. Google parses the HTML [[img][<img>]] elements (even when they're enclosed in other elements such as ~<picture>~ elements) in your pages to index images, but doesn't index CSS images.

#+begin_src html

<!-- Bad: -->
<div style="background-image:url(puppy.jpg)">A golden retriever puppy</div>

<!-- Good: -->
<img src="puppy.jpg" alt="A golden retriever puppy" />

#+end_src

**** Appropriate *text alternatives* based on the purpose of the image
***** Informative Images
****** Brief
[[https://www.w3.org/WAI/tutorials/images/][W3 Images Tutorial]]
Informative images convey a simple concept or information that can be expressed in a short phrase or sentence. The text alternative should convey the meaning or content that is displayed visually, which typically isn’t a literal description of the image.

In some situations a detailed literal description may be needed, but only when the content of the image is all or part of the conveyed information. Whether to treat an image as informative or decorative is a judgment that authors make, based on the reason for including the image on the page.

****** Images used to label other information
This example shows two image icons – one of a telephone, one of a fax machine. A phone number follows each image. Consistent with the visual presentation, the text alternatives “Telephone:” and “Fax:” are used to identify the device associated with each number.

#+begin_src html

<p>
  <img src="phone.png" alt="Telephone:"> 0123 456 7890
</p>
<p>
  <img src="fax.png" alt="Fax:"> 0123 456 7891
</p>

#+end_src

****** Images used to supplement other information
The following image shows a dog wearing a bell. It supplements the adjacent text that explains the purpose of this bell. A short text alternative is sufficient to describe the information that is displayed visually but is not explained in the text; in this case, the text alternative is “Dog with a bell attached to its collar.”.

#+begin_src html

<p>
  <img src="dog.jpg" alt="Dog with a bell attached to its collar.">
  Off-duty guide dogs often wear ...
</p>
<!-- Note: If the text included an explanation of how the dog wears a bell, -->
<!-- the image might be considered redundant and therefore decorative. As -->
<!-- this isn’t mentioned in the text, the image is deemed to be -->
<!-- informative. -->

#+end_src

****** Images conveying an impression or emotion
This photograph shows a happy family group. It’s a stock image so the individuals should not be identified. It’s being used to give the impression that the website or the company it represents is family-friendly. The text alternative is “We’re family-friendly” as this best describes the intended impression.

#+begin_src html

<img src="family.jpg" alt="We’re family-friendly. ">
<!-- Note: If the purpose of this image were simply to improve the look of -->
<!-- a page rather than convey an impression, it could be deemed to be -->
<!-- decorative, as shown in 'Decorative Images: Image used for -->
<!-- ambiance'. -->

#+end_src

****** Images conveying file format
In this example, a document is available to download in three different formats identified by format icons within text links. They have the text alternatives 'HTML', 'Word document', and 'PDF' to distinguish the file type for each link:

#+begin_src html

<p>
  <a href="…">
    2012 Annual report and accounts
    <img src="html5logo.png" alt="HTML" > (43KB)
  </a>, also available in
  <a href="…">
    <img src="worddocument.png" alt="Word document"> (254KB)
  </a>
  or
  <a href="…">
    <img src="pdfdocument.png" alt="PDF"> (353KB)
  </a>
  format.
</p>
<!-- Note: If the format identification were written as part of the link -->
<!-- text, the image might be considered decorative and have a null (empty) -->
<!-- alt attribute (alt=""). It could remain in the same link element (<a>) -->
<!-- as the text, to include it in the clickable area. Further discussion -->
<!-- is provided in “Functional Images: Logo image within link text”. -->
<!-- This particular example is similar to the Functional Images: icon -->
<!-- within linked text in that the image conveys information that isn’t -->
<!-- given in the link text. -->

#+end_src

***** Decorative Images
****** Brief
Decorative images don’t add information to the content of a page. For example, the information provided by the image might already be given using adjacent text, or the image might be included to make the website more visually attractive.

In these cases, a null (empty) [[alt]] text should be provided ( ~alt=""~ ) so that they can be ignored by assistive technologies, such as screen readers. Text values for these types of images would add audible clutter to screen reader output or could distract users if the topic is different from that in adjacent text. Leaving out the ~alt~ attribute is also not an option because when it is not provided, some screen readers will announce the file name of the image instead.

*Note*: Where possible, decorative images should be provided using CSS background images instead.

****** Image used as part of page design
This image is used as a border in the page design and has a purely decorative purpose.

#+begin_src html

<img src="topinfo_bg.png" alt="">
<!-- Note: If the image was used to indicate a thematic break, e.g. a scene -->
<!-- change in a story, or a transition to another topic, using the <hr> -->
<!-- element would be appropriate to notify assistive technology. -->

#+end_src

****** Decorative image as part of a text link
This illustration of a crocus bulb is used to make the link easier to identify and to increase the clickable area but doesn’t add to the information already provided in the adjacent link text (of the same anchor). In this case, use a null (empty) alt value for the image.

#+begin_src html

<a href="crocuspage.html">
  <img src="crocus.jpg" alt="">
  <strong> Crocus bulbs</strong>
</a>

#+end_src

****** Image with adjacent text alternative
This picture of a sleeping dog is already sufficiently described by the adjacent text. There is no need to repeat this information, and a null (empty) alt value can be used for this image.

#+begin_src html

<p>
  <img src="sleepingdog.jpg" alt="">
  <strong>Let sleeping dogs lie:</strong> ...
</p>

#+end_src

****** Image used for ambiance (eye-candy)
This image is used only to add ambiance or visual interest to the page.

#+begin_src html

<img src="tropical.jpg" alt="">
<!-- Note: If the purpose of this image was to identify a plant or convey -->
<!-- other information, rather than just to improve the look of the page, -->
<!-- it should probably be treated as informative. The author determines -->
<!-- the purpose for the use of the image. -->

#+end_src

***** Functional Images
****** Brief
Functional images are used to initiate actions rather than to convey information. They are used in buttons, links, and other interactive elements. The text alternative for the image should convey the action that will be initiated (the purpose of the image), rather than a description of the image.

For instance, the text alternative should be “print this page” rather than “(image of a) printer”, “search” rather than “magnifying lens” or “Example.com homepage” rather than “Example.com logo”.

****** Image used alone as a linked logo
The following image is the only content of a link that leads to the W3C home page.

#+begin_src html

<a href="https://www.w3.org/">
  <img src="w3c.png" alt="W3C home">
</a>

#+end_src

****** Icon image conveying information within link text
In this example, the image follows text within a link to inform users that the link will open in a new window. It has the text alternative “new window” to convey the meaning of the icon:

#+begin_src html

<a href="https://www.w3.org/" target="_blank">
  W3C Homepage <img src="new-window.png" alt="new window">
</a>

#+end_src

****** Stand-alone icon image that has a function
The following image is an icon representing a printer to denote print functionality. It has the text alternative “Print this page” because its purpose is to activate the print dialog when it is selected:

#+begin_src html

<a href="javascript:print()">
  <img src="print.png" alt="Print this page">
</a>

#+end_src

****** Image used in a button
The following image is used to give the button a distinct style. In this case, it is the button to initiate a search request and is an icon representing a magnifying lens. The text alternative for the image is “search” to convey the purpose of the button:

#+begin_src html

<input type="image" src="searchbutton.png" alt="Search">

#+end_src

****** Anoher example

#+begin_src html

alt="Welcome to the Web Design Group"
<!-- is more useful to those not loading images than -->
alt="Web Design Group logo".

<!-- When images are alongside text or other images, some form of -->
<!-- separation may be necessary, such as -->
alt=" [Photograph of me] " <!-- or --> alt="Web Design Group ~"

#+end_src

***** Images of Text
Images of text display text that is intended to be read. With the current CSS capabilities in most web browsers, it is good design practice to use actual text that is styled with CSS rather than image-based text presentation. Genuine text is much more flexible than images: It can be resized without losing clarity, and background and text colors can be modified to suit the reading preferences of users. Images are more likely to distort and pixelate when resized. In those rare situations where images of text must be used, the text alternative must contain the same text presented in the image.

*Image of text used as an unlinked logo*
The following image is the logo for the Web Accessibility Initiative. It is not part of a link, so the text alternative is “Web Accessibility Initiative”. There’s no need to mention that it is a logo.

#+begin_src html

<img src="wai.png" alt="Web Accessibility initiative">
<!-- Note: If this logo were linked then it would become a functional image.  -->

#+end_src

***** Complex Images
****** Brief
Complex images contain substantial information – more than can be conveyed in a short phrase or sentence. These are typically:

- graphs and charts, including flow charts and organizational charts;
- diagrams and illustrations where the page text relies on the user being able to understand the image;
- maps showing locations or other information such as weather systems.

In these cases, a two-part text alternative is required. The first part is the short description to identify the image and, where appropriate, indicate the location of the long description. The second part is the long description – a textual representation of the essential information conveyed by the image.

****** Groups of Images
Sometimes groups of images are used together to represent one piece of information. For example, a collection of star icons that together represent a rating. In this case, only one of the images needs a text alternative to describe the entire collection, while the other images have a null (empty) [[alt]] attribute so that they are ignored by assistive technology.

In other cases, a group of images may represent a collection of related images. For example, showing a collection of art impressions that are thematically related. In this case, each image needs its text alternative that describes it individually, as well as its relationship within the group.



#+begin_src html

<!-- Multiple images conveying a single piece of information -->

<!-- This group of five images combined shows a product rating. There are -->
<!-- five images (three filled stars, one half-filled star and one empty -->
<!-- star) indicating the overall rating. -->
Rating:
<img src="star-full.jpg"  alt="3.5 out of 5 stars">
<img src="star-full.jpg"  alt="">
<img src="star-full.jpg"  alt="">
<img src="star-half.jpg"  alt="">
<img src="star-empty.jpg" alt="">

#+end_src

****** Image Maps
A client-side image map is an image divided into selectable regions defined by ~<area>~ elements (“hotspots”) that allow user interaction. Usually, the selectable regions are links to other pages. For image maps, text alternatives are needed on both the ~<img>~ element itself (to convey the informative context) and on each of the ~<area>~ elements (to convey the link destination or the action that will be initiated if the link is followed).

**** Responsive images
***** Brief
Designing responsive web pages leads to better user experience, since users use them across a plethora of device types.

Web pages use the ~<picture>~ element or the ~srcset~ attribute of an [[img]] element to specify responsive images. However, some browsers and crawlers do not understand these attributes. We recommend that you always specify a fallback URL via the ~src~ attribute.

***** <img srcset>
The ~srcset~ attribute allows specifying different versions of the same image, specifically for different screen sizes.

#+begin_src html

<img
  srcset="maine-coon-nap-320w.jpg 320w, maine-coon-nap-480w.jpg 480w,
          maine-coon-nap-800w.jpg 800w"
  sizes="(max-width: 320px) 280px, (max-width: 480px) 440px, 800px"
  src="maine-coon-nap-800w.jpg"
  alt="A watercolor illustration of a maine coon napping leisurely
       in front of a fireplace">

#+end_src

***** <picture>
The ~<picture>~ element is a container that is used to group different ~<source>~ versions of the same image. It offers a fallback approach so the browser can choose the right image depending on device capabilities, like pixel density and screen size. The picture element also comes in handy for using new image formats with built-in graceful degradation for clients that may not yet support the new formats.

Per section 4.8.1 of the HTML Standard, make sure that you provide an ~img~ element as a fallback with a ~src~ attribute when using the picture element using the following format:

#+begin_src html

<picture>
 <source type="image/svg+xml" srcset="pyramid.svg">
 <source type="image/webp" srcset="pyramid.webp">
 <img src="pyramid.png" alt="An 1800s oil painting of The Great Pyramid">
</picture>

#+end_src

*** Provide date information to Google and page
Add a user-visible date to the page and feature it prominently. Label your dates appropriately with text like "Publish" or "Last updated". Here are some examples of how you can highlight date information about a web page:

Posted Feb 4, 2019  or  Published February 4, 2019
Last updated: Feb 14, 2018  or  Updated Feb 14, 2019 8pm ET

#+begin_src html

<html>
  <head>
    <title>Analyzing Google Search traffic drops</title>
  </head>
  <body>
    <p>
      Posted Tuesday, July 20, 2021
    </p>
    <p>
      Suppose you open Search Console and find out that your Google
      Search traffic dropped. What should you do?
    </p>
  </body>
</html>

#+end_src

** Tools for SEO
*** Core Web Vitals workflows with Google tools
Para empezar a optimizar la experiencia del usuario con Core Web Vitals, pruebe el siguiente flujo de trabajo:

- Utilice el nuevo [[https://search.google.com/search-console/about][Core Web Vitals Report]] de Search Console para *identificar los grupos de páginas que requieren atención* (según los datos de campo (field data)). Obtiene un resumen del rendimiento de sus orígenes en el campo.
- Una vez que haya identificado las páginas que necesitan atención, utilice [[https://pagespeed.web.dev/][PageSpeed Insights]] (impulsado por Lighthouse y Chrome UX Report) para *diagnosticar problemas de laboratorio y de campo* en una página. PageSpeed Insights (PSI) está disponible por medio de Search Console o puede introducir una URL directamente en PSI.
- ¿Está listo para optimizar su sitio localmente en el laboratorio? Utilice [[https://github.com/GoogleChrome/lighthouse][Lighthouse]]  y [[https://developer.chrome.com/docs/devtools/][Chrome DevTools]]  para *medir* [[Core Web Vitals]] y obtenga una orientación práctica sobre qué corregir exactamente. La extensión de Chrome Web Vitals puede brindarle una visión en tiempo real de las métricas en el escritorio.
- ¿Necesita un panel de control personalizado de Core Web Vitals? Utilice el panel de control actualizado de /CrUX/ o la nueva /API de Chrome UX/ Report para los datos de campo o la API de PageSpeed Insights para los datos de laboratorio.
- Pruebe la nueva /API de Chrome User Experience Report/ para *acceder fácilmente a los resultados de su origen y su URL* con respecto a Core Web Vitals durante los últimos 28 días.
- Utilice la sección y el pie de página de Experiencia en el panel de Rendimiento de /DevTools/ para profundizar y *depurar* contra Core Web Vitals específicos.
- Utilice la extensión Web Vitals para realizar un *seguimiento del rendimiento* de una página con respecto a Core Web Vitals *en tiempo real*.
- ¿Busca orientación? [[https://web.dev/measure/][web.dev/measure]] puede *medir su página y mostrarle un conjunto priorizado de normas y laboratorios de código* para la optimización, utilizando datos de PageSpeed Insights (PSI).
- Por último, utilice *Lighthouse CI* en las solicitudes de extracción para *asegurarse de que no haya regresiones* en Core Web Vitals antes de implementar un cambio en la producción.

- Lab data :: describes how hypothetical users may experience your website. (Herramientas de laboratorio)
- Field data :: describes how real users actually experienced your website. Field data is also known as Real User Monitoring (RUM). (Herramientas de campo)
- Search Console :: el nuevo Core Web Vitals Report en Search Console le ayuda a identificar grupos de páginas de su sitio que requieren atención, según los datos del mundo real (de campo) de CrUX. El rendimiento de las URL se agrupa por estado, tipo de métrica y grupo de URL (grupos de páginas web similares).
- PageSpeed Insights :: pagespeed Insights (PSI) reporta sobre el rendimiento de laboratorio y de campo de una página en dispositivos móviles y equipos de escritorio. La herramienta proporciona una visión general de cómo los usuarios del mundo real experimentan la página (impulsada por Chrome UX Report) y un conjunto de recomendaciones prácticas sobre cómo el propietario de un sitio puede mejorar la experiencia de la página (proporcionada por Lighthouse).
- Lighthouse :: lighthouse es una herramienta automatizada de auditoría de sitios web que ayuda a que los desarrolladores diagnostiquen problemas e identifiquen oportunidades para mejorar la experiencia del usuario de sus sitios. Mide varias dimensiones de la calidad de la experiencia del usuario en un entorno de laboratorio, incluyendo el rendimiento y la accesibilidad.
- CrUX :: chrome UX Report (CrUX) es un conjunto de datos públicos sobre la experiencia real del usuario en millones de sitios web. Mide las versiones de campo de todas las Core Web Vitals. A diferencia de los datos de laboratorio, los datos de CrUX provienen de usuarios que han optado por participar en el campo.

*** Mobile-friendly
The page is mobile-friendly. Check if your page is mobile-friendly https://search.google.com/test/mobile-friendly

** Guidelines for SEO
1. [[Page experience signals]]
2. [[Best practices for web content]]
3. [[Best practices for HTML tags]]

** Glossary
*** Index
Google stores all web pages that it knows about in its index. The index entry for each page describes the content and location (URL) of that page.

*** To index
Is when Google fetches a page, reads it, and adds it to the [[Index][index]]: Google indexed several pages on my site today.

*** Crawl
The process of looking for new or updated web pages. Google discovers URLs by following links, by reading sitemaps, and by many other means. Google crawls the web, looking for new pages, then indexes them (when appropriate).

*** Crawler
Automated software that [[Crawl][crawls]] (fetches) pages from the web and indexes them.

*** Googlebot
The generic name of Google's [[Crawler][crawler]]. Googlebot crawls the web constantly.

*** Snippet
A snippet is the description or summary part of search result on Google Search and other properties. Google uses a number of different sources to automatically determine the appropriate snippet, including descriptive information in the meta description tag for each page. We may also use information found on the page, or create rich results based on markup and content on the page.

*** Robots.txt
Use robots.txt rules to prevent crawling, and sitemaps to encourage crawling. Block crawling of duplicate content on your site, or unimportant resources (such as small, frequently used graphics such as icons or logos) that might overload your server with requests. Don't use robots.txt as a mechanism to prevent indexing; use the noindex tag or login requirements for that.

*** Breadcrumb
Is a row of internal links at the top or bottom of the page that allows visitors to quickly navigate back to a previous section or the root page.

*** Sitemaps
Is a file on your site where you provide information about the pages, videos, and other files on your site, and the relationships between them. Sitemaps are a very important way to tell Google which pages are important to your site, and also provide additional information (such as update frequency), and are very important for crawling non-textual content (such as images or video). Although Google won't limit crawling to pages listed in your sitemaps, it will prioritize crawling these pages. This is especially important for sites with rapidly changing content, or with pages that might not be discovered through links.

*** Sitelinks
Are links from the same domain that are clustered together under a web result.

*** Canonical
Is the page that may be shown in search results.

*** Rich results
Adding structured data can enable search results that are more engaging to users and might encourage them to interact more with your website, which are called rich results.

*** Byline
Is the date that Google estimates that the web page was updated or published.

* References
- [[https://developer.mozilla.org][MDN]]
- [[https://www.w3schools.com][W3]]
- [[https://conclase.net][Con Clase]]
- [[https://es.wikipedia.org][Wikipedia]]
- [[https://developers.google.com/search/docs/fundamentals/get-on-google][Google SEO fundamentals]]
